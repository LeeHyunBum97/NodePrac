[NodePrac8]
Authentication(인증)

1. Authentication(인증)과 Authorization(인가)
    => 인증 : 계정관련, 로그인 관련
    => 인가 : 권한 봔련

2. 인증을 구현하는 방법으로
    => 로컬 로그인 : 회원 정보를 저장하고 있다가 인증
    회원 정보를 저장할 때는 비밀 번호는 복호화가 불가능 한 방식을 사용하고 개인을 식별할 수 있는 정보를 마스킹 처리를 하거나 복호화가 가능한 방식의 암호화를 활용해야 한다.


    => OAuth(공통된 인증 방식) 로그인 : 다른서버(카카오, 네이버 등)에 저장된 인증정보를 활용해서 인증하는 방식


3. 인증을 위한 프로젝트 기본 설정
    => 로그인을 할 수 있도록 회원가입을 하고 로그인 처리를 수행하고 간단한 글과 파일을 업로드 할 수 있는 프로젝트

    1) 프로젝트 생성 [NodePrac8]

    2) 필요한 패키지 설치
        npm install express morgan dotenv compression morgan file-stream-rotator multer cookie-parser express-session express-mysql-session mysql2 sequelize sequelize-cli nunjucks
        npm install --save-dev nodemon

    3) Package.json 수정
         "scripts": {
            "start": "nodemon App.js",
            "test": "echo \"Error: no test specified\" && exit 1"
        }

    4) sequelize 초기화
        => npx sequelize init

    5) 디렉토리 생성
        => views : 화면에 출력할 파일(VIEW)들이 저장되는 디렉토리
        => routes : 사용자의 요청이 왔을 때 처리하는 (CONTROLLER) 라우팅 파일이 저장되는 폴더
        => public : 정적인 파일(Resource)가 저장되는 디렉터리

    6) 프로젝트에 .env파일 생성 후 작성
        => 소스 코드에 노출되서 안되는 내용이나 개발 환경에서 운영환경으로 이행(Migration)할 때 변경될 내용을 작성하는데 이내용은 실행 중에는 변경되지 않는 내용이어야 한다.
        => 대표적인 내용이 DB접속 정보나 암호화를 하기 위한 Key 또는 서버 포트번호 와 같은 것들이 있다.
        => 이런 내용은 대부분 실행 중에는 변경되지 않지만 개발 환경에서 운영환경으로 이행 할 때 변경될 가능성이 높은 내용이다.

    
    P.S. App.js는 모든 클라이언트의 요청이 들어오는 곳 - Front-End
         routes 디렉토리 안의 js 파일들은 특정요청에 대한 처리를 수행하는 곳 - pageController

    7) App.js 에 서버 기본틀 작성

    const express = require('express');

    // .env 파일을 읽어서 process.env.~ 로 읽어드리게 하는 라이브러리
    const dotenv = require('dotenv');
    dotenv.config();

    //서버 설정
    const app = express();
    app.set('port', process.env.PORT);
    //로그 출력 설정
    const fs = require('fs');
    const path = require('path');

    //static 파일의 경로 설정
    app.use(express.static(path.join(__dirname, 'public')));

    // view template(템플릿 엔진: 서버데이터를 html로 출력하기 위한 것) 설정 서버의 데이터를 html과 합쳐서 다시 html로
    // 변환해주는 라이브러리
    const nunjucks = require('nunjucks');
    app.set('view engine', 'html');
    nunjucks.configure('views', {
        express: app,
        watch: true
    });

    //로그 설정 라이브러리
    const morgan = require('morgan');
    const FileStreamRotator = require('file-stream-rotator');
    const logDirectory = path.join(__dirname, 'log');

    // 로그 디렉토리 생성
    fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

    // 로그 파일 옵션 설정
    const accessLogStream = FileStreamRotator.getStream({
        date_format: 'YYYYMMDD',
        filename: path.join(logDirectory, 'access-%DATE%.log'),
        frequency: 'daily',
        verbose: false
    });

    // 로그 설정
    app.use(morgan('combined', {stream: accessLogStream}));

    //출력하는 파일 압축해서 전송
    const compression = require('compression');
    app.use(compression());

    //post 방식의 파라미터 읽기, form 형식으로 받아온 데이터 읽기
    let bodyParser = require('body-parser');
    app.use(bodyParser.json()); // to support JSON-encoded bodies
    app.use(bodyParser.urlencoded({ // to support URL-encoded bodies
        extended: true
    }));

    //쿠키 설정
    const cookieParser = require('cookie-parser');
    app.use(cookieParser(process.env.COOKIE_SECRET));

    //세션 설정
    const session = require("express-session");
    let options = {
        host: process.env.HOST,
        port: process.env.MYSQLPORT,
        user: process.env.USERID,
        password: process.env.PASSWORD,
        database: process.env.DATABASE
    };

    const MySQLStore = require('express-mysql-session')(session);
    app.use(
        session({secret: process.env.COOKIE_SECRET, resave: false, saveUninitialized: true, store: new MySQLStore(options)})
    );

    // 404 에러가 발생한 경우 처리
    app.use((req, res, next) => {
        const err = new Error(`${req.method} ${req.url} 라우터가 없습니다.`);
        err.status = 404;
        next(err);
    });

    // 404에러 이외의 에러가 발생한 경우 처리
    app.use((err, req, res, next) => {
        res.locals.message = err.message;
        res.locals.error = process.env.NODE_ENV !== 'production'
            ? err
            : {};
        res.status(err.status || 500);
        res.render('error');
    });

    app.listen(app.get('port'), () => {
        console.log(app.get('port'), '번 포트에서 대기 중');
    });

    8) 기본적인 처리
        => routes 디렉토리에 page.js 파일을 만들고 메인화면, 프로필 화면 그리고 회원가입 화면을 위한 라우팅 코드 작성

    const express = require("express");

    const router = express.Router();

    // 공통된 처리 - 무조건 수행되는 일
    router.use((req, res) => {
        // 로그인한 유저 정보
        res.locals.user = null;

        // 게시글을 follow하고 되고 있는 개수
        res.locals.follwCount = 0;
        res.locals.follwingCount = 0;

        // 개시글을 follow하고 있는 유정들의 목록
        res.locals.follwerIdList = [];

        next();
    })

    // 메인 화면
    router.get('/', (req, res) => {
        const twits = [];

        // 템플릿 엔진을 이용한 출력
        // res.render('뷰이름', 데이터);
        // views 디렉토리의 main.html 로 출력된다.
        res.render('main', {title:"Node Authentication", twits});
    });

    // 회원가입
    router.get('/join', (res, req, next) => {
        res.render('join', {title : "회원가입 - Node Authentication"})
    });

    // 프로필 화면 처리
    router.get('/profile', (res, req, next) => {
        res.render('join', {title : "나의 정보 - Node Authentication"})
    });

    module.exports = router;

    9) App.js에 메인화면, 회원가입, 프로필 화면 처리하는 라우팅 파일 포함 시키기

        => 일반적인 서버 설정이 끝난뒤에 작성하는 것을 권장한다.

    //라우터 설정
    const pageRouter = require('./routes/page');
    // 이곳에 설정한 URL과 page.js에 설정된 URL조합으로 URL을 결정
    app.use('/', pageRouter);

    10) 공통된 레이아웃을 위한 내용을 views 디렉토리에 layout.html을 작성

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="UTF-8">
            <!-- {{}} 해당 부분이 데이터 출력하는 부분 -->
            <title>{{title}}</title>
            <!-- 모바일 페이지 만들 때 content="width=device-width, user-scalable=no"와 같은 속성 사용 -->
            <meta name="viewport" content="width=device-width, user-scalable=no">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <link rel="stylesheet" href="/main.css">
        </head>
        <body>
            <div class="container">
                <div class="profile-wrap">
                    <div class="profile">
                        <!-- 로그인 되어있으면 -->
                        {% if user and user.id %}
                            <div class="user-name">{{'안녕하세요! ' + user.nick + '님'}}</div>
                            <div class="half">
                                <div>팔로잉</div>
                                <div class="count following-count">{{followingCount}}</div>
                            </div>
                            <div class="half">
                                <div>팔로워</div>
                                <div class="count follower-count">{{followerCount}}</div>
                            </div>
                            <input id="my-id" type="hidden" value="{{user.id}}">
                            <a id="my-profile" href="/profile" class="btn">내 프로필</a>
                            <a id="logout" href="/auth/logout" class="btn">로그아웃</a>
                            
                        <!-- 로그인 되어 있지 않다면 -->
                        {% else %}
                            <form id="login-form" action="/auth/login" method="post">
                                <div class="input-group">
                                    <label for="email">이메일</label>
                                    <input
                                        id="email"
                                        type="email"
                                        name="email"
                                        required="required"
                                        autofocus="autofocus">
                                </div>
                                <div class="input-group">
                                    <label for="password">비밀번호</label>
                                    <input id="password" type="password" name="password" required="required">
                                </div>
                                <a id="join" href="/join" class="btn">회원가입</a>
                                <button id="login" type="submit" class="btn">로그인</button>
                                <a id="kakao" href="/auth/kakao" class="btn">카카오톡</a>
                            </form>
                        {% endif %}
                    </div>
                    <footer>
                        Made by&nbsp;
                        <a href="https://ggangpae1.tistory.com/" target="_blank">ADAM</a>
                    </footer>
                </div>
                {% block content %}{% endblock %}
            </div>
            <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
            <script>
                window.onload = () => {
                    if (new URL(location.href).searchParams.get('loginError')) {
                        alert(new URL(location.href).searchParams.get('loginError'));
                    }
                };
            </script>
            {% block script %}{% endblock %}
        </body>
    </html>

    11) main 화면을 위한 내용을 views 디렉토리에 main.html에 작성한다.
    {% extends 'layout.html' %}
    {% block content %}
        <div class="timeline">
            {% if user %}
                <div>
                    <form id="twit-form" action="/post" method="post" enctype="multipart/formdata">
                        <div class="input-group">
                            <textarea id="twit" name="content" maxlength="140"></textarea>
                        </div>
                        <div class="img-preview">
                            <img id="img-preview" src="" style="display: none;" width="250" alt="미리보기">
                            <input id="img-url" type="hidden" name="url">
                        </div>
                        <div>
                            <label id="img-label" for="img">사진 업로드</label>
                            <input id="img" type="file" accept="image/*">
                            <button id="twit-btn" type="submit" class="btn">게시</button>
                        </div>
                    </form>
                </div>
            {% endif %}
            <div class="twits">
                {% for twit in twits %}
                    <div class="twit">
                        <input type="hidden" value="{{twit.User.id}}" class="twit-user-id">
                        <input type="hidden" value="{{twit.id}}" class="twit-id">
                        <div class="twit-author">{{twit.User.nick}}</div>
                        {% if not followerIdList.includes(twit.User.id)and twit.User.id !== user.id %}
                            <button class="twit-follow">팔로우하기</button>
                        {% endif %}
                        <div class="twit-content">{{twit.content}}</div>
                        {% if twit.img %}
                            <div class="twit-img"><img src="{{twit.img}}" alt="섬네일"></div>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        </div>
    {% endblock %}
    {% block script %}
        <script>
            if (document.getElementById('img')) {
                document
                    .getElementById('img')
                    .addEventListener('change', function (e) {
                        const formData = new FormData();
                        console.log(this, this.files);
                        formData.append('img', this.files[0]);
                        axios
                            .post('/post/img', formData)
                            .then((res) => {
                                document
                                    .getElementById('img-url')
                                    .value = res.data.url;
                                document
                                    .getElementById('img-preview')
                                    .src = res.data.url;
                                document
                                    .getElementById('img-preview')
                                    .style
                                    .display = 'inline';
                            })
                            .catch((err) => {
                                console.error(err);
                            });
                    });
            }
            document
                .querySelectorAll('.twit-follow')
                .forEach(function (tag) {
                    tag.addEventListener('click', function () {
                        const myId = document.querySelector('#my-id');
                        if (myId) {
                            const userId = tag
                                .parentNode
                                .querySelector('.twit-user-id')
                                .value;
                            if (userId !== myId.value) {
                                if (confirm('팔로잉하시겠습니까?')) {
                                    axios
                                        .post(`/user/${userId}/follow`)
                                        .then(() => {
                                            location.reload();
                                        })
                                        .catch((err) => {
                                            console.error(err);
                                        });
                                }
                            }
                        }
                    });
                });
        </script>
    {% endblock %}

    12) 나의 정보를 위한 출력 내용을 views 디렉토리에 저장
    {% extends 'layout.html' %}
    {% block content %}
        <div class="timeline">
            <div class="followings half">
                <h2>팔로잉 목록</h2>
                {% if user.Followings %}
                    {% for following in user.Followings %}
                        <div>{{following.nick}}</div>
                    {% endfor %}
                {% endif %}
            </div>
            <div class="followers half">
                <h2>팔로워 목록</h2>
                {% if user.Followers %}
                    {% for follower in user.Followers %}
                        <div>{{follower.nick}}</div>
                    {% endfor %}
                {% endif %}
            </div>
        </div>
    {% endblock %}

    13) 회원가입을 출력하기 위한 내용을 veiws 디텍토리 join.t에 저장
    {% block script %}
    <script>
            window.onload = () => {
                if (new URL(location.href).searchParams.get('error')) {
                    alert('이미 존재하는 이메일입니다.');
                }
            };
        </script>
    {% endblock %}

    14) 에러가 발생한 경우 출력할 내용을 veiews 디렉토리의 error.html에 저장
    {% extends 'layout.html' %}
    {% block content %}
    <h1>{{message}}</h1>
    <h2>{{error.status}}</h2>
    <pre>{{error.stack}}</pre>
    {% endblock %}

    15) 스타일 관련한 내용을 public 디렉토리에 main.css에 저장
    * {
            box-sizing: border-box;
        }
        body,
        html {
            margin: 0;
            padding: 0;
            height: 100%;
        }
        .btn {
            display: inline-block;
            padding: 0 5px;
            text-decoration: none;
            cursor: pointer;
            border-radius: 4px;
            background: white;
            border: 1px solid silver;
            color: crimson;
            height: 37px;
            line-height: 37px;
            vertical-align: top;
            font-size: 12px;
        }

        input[type='text'],
        input[type='email'],
        input[type='password'],
        textarea {
            border-radius: 4px;
            height: 37px;
            padding: 10px;
            border: 1px solid silver;
        }
        .container {
            width: 100%;
            height: 100%;
        }
        @media screen and (min-width: 800px) {
            .container {
                width: 800px;
                margin: 0 auto;
            }
        }
        .input-group {
            margin-bottom: 15px;
        }
        .input-group label {
            width: 25%;
            display: inline-block;
        }
        .input-group input {
            width: 70%;
        }
        .half {
            float: left;
            width: 50%;
            margin: 10px 0;
        }
        #join {
            float: right;
        }
        .profile-wrap {
            width: 100%;
            display: inline-block;
            vertical-align: top;
            margin: 10px 0;
        }
        @media screen and (min-width: 800px) {
            .profile-wrap {
                width: 290px;
                margin-bottom: 0;
            }
        }
        .profile {
            text-align: left;
            padding: 10px;
            margin-right: 10px;
            border-radius: 4px;
            border: 1px solid silver;
            background: lightcoral;
        }
        .user-name {
            font-weight: bold;
            font-size: 18px;
        }
        .count {
            font-weight: bold;
            color: crimson;
            font-size: 18px;
        }
        .timeline {
            margin-top: 10px;
            width: 100%;
            display: inline-block;
            border-radius: 4px;
            vertical-align: top;
        }
        @media screen and (min-width: 800px) {
            .timeline {
                width: 500px;
            }
        }
        #twit-form {
            border-bottom: 1px solid silver;
            padding: 10px;
            background: lightcoral;
            overflow: hidden;
        }
        #img-preview {
            max-width: 100%;
        }
        #img-label {
            float: left;
            cursor: pointer;
            border-radius: 4px;
            border: 1px solid crimson;
            padding: 0 10px;
            color: white;
            font-size: 12px;
            height: 37px;
            line-height: 37px;
        }
        #img {
            display: none;
        }

    => 실행후 확인

4. 데이터 베이스 작업
    1) 테이블 구조
        => 회원 테이블
        - 이메일
        - 닉네임
        - 패스워드
        - 로그인 방법
            -> 직접 로그인 했는지 아니면 카카오 로그인 했는지 여부를 저장
        - 카카오 아이디

        - 생성시간
        - 수정시간
        - 삭제시간

        => POST 테이블
            - 게시글 내용
            - 이미지 파일의 경로
        
        => HashTag 테이블
        - 태그이름

        => 관계
        - User와 Post 는 1:N 관계 
        - HashTag와 Post는 N:M 관계
        - User와 User의 관계 N:M -> 한명의 User는 여러명을 팔로잉하거나 팔로우 당할 수 있다.
        
    => models/User.js

    const Sequelize = require('sequelize')
    module.exports = class 모델이름 extends Sequelize.Model{
        static init(sequelize){
            // 테이블에 대한 설정
            return super.init({
            // 컬럼에 대한 설정
            // 카카오 로그인 때문에 email, nick, pw에 대한 설정이 조금 다르다.
            email:{
                type:Sequelize.STRING(40),
                allowNull:true,
                unique:true
            },
            nick:{
                type:Sequelize.STRING(40),
                allowNull:false
            },
            password:{
                type:Sequelize.STRING(12),
                allowNull:true
            },
            provider:{ // 로그인 방법 
                type:Sequelize.STRING(10),
                allowNull:false,
                defaultValue:'local'
            },
            snsId:{
                type:Sequelize.STRING(50),
                allowNull:true
            }
            }, {
            // 테이블에 대한 설정
            sequelize,
            timestamps:true,
            underscored:false,
            modelName:User,
            tableName:'snsuser',
            paranoid:true,
            charset : 'utf8',
            collate:'utf8_general_ci'
            });
            
        }
        // 관계에 대한 설정
        static associations(db){
            db.User.hasMany(db.Post);
            db.User.belongsToMany(db.User,{
            foreignKey:'followingId',
            as : 'Followers',
            through : 'Follow'
            });

            db.User.belongsToMany(db.User,{
            foreignKey:'followingId',
            as : 'Followings',
            through : 'Follow'
            });
        }
    }
    
    => models/Post.js

    const Sequelize = require('sequelize')
    module.exports = class Post extends Sequelize.Model{
        static init(sequelize){
            // 테이블에 대한 설정
            return super.init({
            // 컬럼에 대한 설정
            content:{
                type:Sequelize.STRING(200),
                allowNull:false,
            },
            img:{
                type:Sequelize.STRING(200),
                allowNull:true
            }
            }, {
            // 테이블에 대한 설정
            sequelize,
            timestamps:true,
            underscored:false,
            modelName:Post,
            tableName:'posts',
            paranoid:true,
            charset : 'utf8mb4', // 이모티콘 ㄱㄴ
            collate:'utf8mb4_general_ci'
            });
            
        }
        // 관계에 대한 설정
        static associations(db){
            // User 와의 관계는 1:N
            db.Post.belongsTo(db.User);

            // HashTag 와는 N:M
            // 다대다 관계는 테이블이 생성되는데 through 가 테이블 이름
            db.Post.belongsToMany(db.HashTag, {through:"PostHashTag"})
        }
    }

    => models/HashTag.js

    const Sequelize = require('sequelize')
    module.exports = class HashTag extends Sequelize.Model{
        static init(sequelize){
            // 테이블에 대한 설정
            return super.init({
            // 컬럼에 대한 설정
            title:{
                type:Sequelize.STRING(15),
                allowNull:false,
                unique:true
            }
            }, {
            // 테이블에 대한 설정
            sequelize,
            timestamps:true,
            underscored:false,
            modelName:HashTag,
            tableName:'hashtag',
            paranoid:true,
            charset : 'utf8mb4', // 이모티콘 ㄱㄴ
            collate:'utf8mb4_general_ci'
            });
            
        }
        // 관계에 대한 설정
        static associations(db){
            // User 와의 관계는 1:N
            db.HashTag.belongsToMany(db.Post);

            // HashTag 와는 N:M
            // 다대다 관계는 테이블이 생성되는데 through 가 테이블 이름
            db.Post.belongsToMany(db.HashTag, {through:"PostHashTag"})
        }
    }

    => models/index.js 에서 내용수정

    const Sequelize = require('sequelize');
    const env = process.env.NODE_ENV || 'development';
    const config = require('./config/config.json')[env];
    const db = {};

    const sequelize = new Sequelize(config.database, config.username, config.password, config)

    db.sequelize = sequelize;
    db.Sequelize = Sequelize;

    // 모델들 가져오기
    const User = require("./User");
    const Post = require("./Post");
    const HashTag = require("./HashTag");

    db.User = User;
    db.Post = Post
    db.HashTag = HashTag;

    // 초기화 작업
    User.init(sequelize);
    Post.init(sequelize);
    HashTag.init(sequelize);

    // 초기화 후 관계 설정 _ 관계설정은 무조건 초기화 이후
    User.associatie(db);
    Post.associate(db);
    HashTag.associate(db);

    module.exports = db;

    => config/config.json 에서 데이터 베이스 접근 정보 수정
    
        {
            "development": {
                "username": "root",
                "password": "8236",
                "database": "adam",
                "host": "127.0.0.1",
                "dialect": "mysql"
            },
            "test": {
                "username": "root",
                "password": "8236",
                "database": "adam",
                "host": "127.0.0.1",
                "dialect": "mysql"
            },
            "production": {
                "username": "root",
                "password": "8236",
                "database": "adam",
                "host": "127.0.0.1",
                "dialect": "mysql"
            }
        }

    => App.js 파일에서 모델과 서버를 연결하는 코드를 추가

    


    => 데이터베이스가 존재하지 않는 경우는 아래 명령을 한번 수행
        npx sequelize-cli db:create

    => 서버를 실행하면 데이터 베이스에 4개 테이블 생성
        -> snsuser, posts, hashtags, PostHashTag

5. Passport 모듈
    => Node에서 인증 작업을 도와주는 모듈
    => 세션이나 쿠키처리를 직접하지 않고 이 모듈의 도움을 받으면 쉽게 구현 가능하다.

    P.S. 인증작업
        -> 일반적으로 로그인 성공하면 세션 생성후 세션에 아이디나 기타 정보를 저장하고 그 이후 부터는 로그인 확인시 세션 정보가 있는지 확인해서 로그인 여부를 판단한다.
        -> 로그아웃하면 세션의 정보를 삭제한다.
        -> Social 로그인 작업을 쉽게 처리할 수 있도록 도와준다
        -> https://passportjs.org
        -> passport kakao, naver, google, .. 로 검색하면 샘플을 찾아 볼 수 있다.
        