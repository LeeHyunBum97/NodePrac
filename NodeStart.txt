Node.js

1. 개요
    => 애플리케이션을 개발할 수 있는 JS환경, 원래 JS는 브라우저 내에서 동적인 작업을 처리하기 위한 언어
       <실제 내부 코드는 C++>

    1) 장점
        => JS 엔진을 사용하기 때문에 접근이 쉬움 - Learning Curve가 짧음
        => 비동기 방식으로 리소스가 사용량이 적음
        => 다양한 라이브러리를 제공한다

    2) 단점
        => Native 언어로 만든 서버환경보다는 느릴 수 있음
        => 짧은 시간에 대량의 클라이언트 요청을 대응하는 웹 애플리케이션 개발에 적합하고 대량의 데이터를 조회하고 긴 처리 시간을 요구하는 작업에
        는 부적합하다.

        => 위와 같은 단점을 해결하기 위해 대용량 연산작업이 요구될 때는 직접 구현하지 않고 AWS의 Lamda나 Google Cloud Fucntions 같은 서비스를
        이용하기도 한다. < CPU 개수를 늘려서 사용한다고 생각 >

    3) 웹 서버 이외의 노드
        => SPA(single page application) : Angular, React, Vue 등
        => 모바일 앱 프레임 워크 : React Native
        => 데스크톱 애플리케이션 : Electron(Atom, slack, VSCode, 블록체인 애플리케이션 등)

    4) 외부 라이브러리 활용
        => npm이라는 프로그램을 이용
        => npm을 이용하면 기능을 확장한 수 많으 모듈을 쉽게 다운로드 설치 가능, 최근에는 yarn을 사용하는 경우도 많다.

2. Node 설정 및 실행 (npm init)
    1) node 프로젝트를 설치할 디렉터리 명과 같으면 안됨 -> 배포가 안된다.
    2) version 설정
    3) description: 앱에 대한 설명
    4) entry point : 프로젝트 진입점 < App.js, index.js >
    5) test command : 앱을 태스트할 때 사용할 명령어 이름
    5) git repository : 연결할 git 주소
    6) keywords : 배포시 검색되게 할 검색어_필요없음 enter
    7) author : 제작자_선택
    8) license : ISC, MIT ---> Open source 라는 의미로 ISC일 때, 사용하는 것은 괜찮으나 고쳐쓰면 알림을 주어야함, MIT는 그냥 써라

    => npm 파일명은 entry point 지정파일 실행 , node 파일명 -> 해당 파일 실행

3. 프로젝트 생성 및 실행

    1) 빈 디렉터리에서 npm init 이라는 명령어 옵션을 설정하면 된다.
        => 프로젝트를 생성하는데 성공하면 프로젝트 설정 파일인 package.json파일이 생성되고 옵션이 설정되어 있습니다.
        => 옵션은 package.json에서 변경 가능

    2) 프로젝트 실행 
        => 프로젝트 실행 : npm start, package.json에서 설정한 entry point파일이 실행 된다.
        => 특정 파일만 실행 : node 파일경로
        => 학습할 때는 파일을 실행, 프로젝트 할 때는 프로젝트 실행

    3) console.log()
        => 콘솔에 메시지를 출력하는 함수인데, 해당 결과는 터미널에 출력된다 -> 브라우저에서 실행되는 것이 아님

3. 모듈 프로그래밍
    => module : 독립적으로 실행가능한 작업의단위
    => Node에서는 하나의 파일이 모듈
    => 모듈화는 중요한 작업중의 하나, 하나의 모듈에 모든 내용을 작성하면 가독성, 재사용성이 떨어진다.
       기능별로 나누는 작업이 중요함.

    Controller : 클라이언트의 요청을 받아서 필요한 서비스 로직을 호출하고 응답을 클라이언트에게 전송하는 역할

    Service : 사용자의 로직(Business Logic)을 처리하는 역할

    Repository(DAO-Data Access Object) : 데이터 저장소와 연결해서 작업을 수행하는 역할
                                         => 과거에는 대부분 RDBMS를 사용해서 DAO라는 표현을 많이 사용, NoSQL이나 분산저장소 같은 형태가 많아
                                            짐에 따라 표현도 조금씩 상이함

    DTO(Data Trancfer Object) : 서로 다른 계층 사이에 전달을 위한 역할 < Controller, Service, Repository 계층간 >
    VO(Variable Object) : 여러개의 속성을 묶어서 하나로 표현하기 위한 역할
    Entitiy : ORM(객체와 테이블의 행을 매핑시켜주는 프레임 워크)에서 테이블과 연결되는 역할.
    ==> 3개를 묶어서 도메인(업무)클래스라고 표현하기도 함.
    ==> 앞선 Controller, Repository는 개발자가 정하지만, 도메인 클래스, 도메인 지식(비지니스 로직)은 아니다.
    ==> 도메인 클래스와 지식은 의뢰인, 기획자 등이 정하게 된다.

    view - 화면 출력하는 역할
    [Service, Repository, DTO, VO, Entitiy를 합쳐서 모델이라해서 Controller, view와 합쳐 MVC패턴이라고 한다.]

4. Node 내장 객체
    => node가 제공하는 객체
    
    1) global 객체
        => 이 객체는 노드 프로그램 전체에서 1개만 생성, 노드의 전역 객체 
        => 하나만 만들어서 노드 프로그램 전체가 공유
        => 사용하는 것을 권장하지 않지만 모든 곳에서 사용해야할 데이터가 있는 경우 사용
        --> (코레일 앱에서 구정이나 사람이 몰릴 때, 대기자 수 표시<누가봐도 같은 데이터> 비슷한 예로 백신 접종 대기자)
        --> (현재 접속자 수, 대기자 수, 로고 등은 모든 사용자에게 동일하게 보여짐 --> 이런데이터를 global을 사용)
        --> Ex> global.countUser = 10; 하며 어디서든 global.countUser를 부르면 10의 값을 가진다

    2) console 객체
        => 현재 보여지는 터미널 화면
           console.log(메시지)   --> 메시지 로깅
          
           console.error(메시지) --> 에러 형태로 로깅
           
           console.trace(메시지) --> 호출 스택을 로깅 --> 함수나 메서드를 호출하는 순서를 역순으로 출력
                                 ==> 호출하는 메서드의 순서를 확인하고자 할 때 사용
           
           console.table(배열)   --> 테이블 형태로 출력
           
           console.time(메시지) & console.timeEnd(메시지) 에서 동일한 메시지를 사용하면 2개 호출 사이 시간을 출력한다.
           
           console.dir(객체, 옵션) --> 객체를 로깅할 때 옵션을 설정하는 것이 가능
        => 로직이 복잡해지거나 여러 모듈을 거쳐가면서 수행되는 코드가 있다면 중간 중간 로그를 출력해서 확인하는 것이 좋으며
           로그를 출력하는 작업들은 배포시 모두 제거해야하고 필요하다면 로그는 파일이나 DB에 기록하는 것이 좋다.

    3) 경로 관련 속성[객체 아님]

        __filename : 현재 파일의 경로
        __dirname : 현재 디렉터리의 경로
        ==> 최근에 등자아하는 언어나 프레임워크는 _를 이용해 예약어를 만드는 경우가 많으므로 이제는 사용자 정의 이름을 만들 대 _로 시작하는
            이름을 사용하는 것을 추천하지 않습니다.

    4) module.exports
        => 모듈의 내용을 다른 곳에서 사용할 수 있도록 하고자 할 때 사용하는 속성
           module.exports = 내보낼 내용;
           exports.내보내고자하는 이름 = 내용;
           -- 두가지 방법
    
    5) this
        => 함수나 클래스 외부에서는 module.exports
        => 함수 안에서는 global
        => 클래스의 메서드 안에서는 인스턴스

    6) require 함수
        => 외부 모듈의 내용을 가져 올 때 사용하는 함수
        => import도 외부 모듈을 가져오는데 사용할 수 있지만 require과의 차이점은 require은 caching 하고 있다는 것이다.
        => 한 번 사용한 모듈을 메모리에 적재해 두었다가 다음에 require하게 되면 캐싱된 모듈을 가져온다
           .js를 생략할 수 있게 된다.

    7) process 객체
        => 노드 프로세스에 대한 정보를 가진 객체로 노드의 버전이나 CPU사용량 등을 확인할 수 있는 속성과 메서드를 제공한다.
        => process.nextTick(콜백함수) : 다른 콜백함수 보다 우선시 처리
           Promise.resolve().then() 으로 작성가능
        => process.exit(코드) : 노드 프로세스 종료 Server에서 사용하지 않는 것이 일반적이며 일반 애플리케이션을 만들었을 때
                                코드는 운영체제에게 알려주는 종료된 이유
    
    8) os 객체
        => OS에 대한 정보를 가잔 객체로 OS종류나 CPU 또는 메모리 사용량등을 확인할 수 있는 속성과 메서드를 제공한다.
        => 실제 서비스를 운영할 때는 메모리 사용량은 화인해보는 것이 좋다.
           서버를 운영할 때 메모리 사용량을 주기적으로 모니터링해서 서버를 물리적으로 늘릴 것인지 여부를 판단.
           경로 지정시 이 속성을 이용해서 지정해야 윈도우나 Mac에서 코드 수정없이 동작하는 애플리케이션을 만들 수 있다.

    9) path 객체
        => 디렉터리와 파일의 경로를 쉽게 조작하도록 도와주는 모듈 , 속성과 함수로 구분
        => path.sep :  경로 구분자(windows는 \ 나저지는 /)'
        => path.dirname(경로): 경로에 해당하는 파일이 위치하고 있는 디렉토리
        => path.extname(경로) : 경로에 해당하는 파일의 확장자
        = path.join(경로의 나열) : 경로를 합쳐서 하나의 경로를 반환
        
        const path = require("path");
        // 현재 디렉터리 확인
        console.log(__dirname);

        // 현재 디렉터리 내의 public 디렉토리 경로확인
        console.log(path.join(__dirname, "public"));

P.S : 소스코드 -> 컴파일(번역-소스코드를 이해할 수 있는 코드로 변경_문법체크) -> Build(실행이 가능한 코드로 변경_start up 코드를 삽입하고
      모듈간의 관계를 설정 (Ex> Export/Import 등의 순서)) -> Run(실행)

      소스코드가 변경되면 컴파일 -> 빌드를 다시해야 한다, 빌드를 하다보면 예기치 않은 문제가 발생할 수 있음
      ==> CI/CD, Jenkins, Cloud(웹 기반 APP)를 하는 이유 중에 하나

    10) url 모듈
        => url과 관련된 모듈
        parse 함수 : url을 분해
        format 함수 : 분해된 url을 하나로 복원

        const url = require("url");
        const addr = "https://www.naver.com/login?id=hb9397";
        const p = url.parse(addr);
        console.log(p);

        ==> Url {
                protocol: 'https:',
                slashes: true,
                auth: null,
                host: 'www.naver.com',
                port: null,
                hostname: 'www.naver.com',
                hash: null,
                search: '?id=hb9397', 
                query: 'id=hb9397',  ===> query string을 저장하고 있다.
                pathname: '/login',  ===> 서버 URL을 제외한 경로를 가지고 있다.
                path: '/login?id=hb9397', 
                href: 'https://www.naver.com/login?id=hb9397'
                } 
        ==> p.query와 같이 속성으로 하나의 값만 추출가능
    
    11) searchParams 모듈
        => query string(parameter 라고 하는데 C가 S에게 GET 방식으로 요청할 때 전송하는 데이터)을 위한 모듈
      
        => 읽어오는 함수.
        getAll(key) : key에 해당되는 모든 데이터를 가져온다. (체크박스나 파일의 경우 다중 선택이 가능)
        get(key) : key에 해당하는 데이터 1개만 가져온다. (체크박스나 파일이 아니라면 하나의 값만 전달)

        => 파라미터를 추가하는 함수
        append(key, value) : 추가
        set(key, value) : 수정

    12) util 모듈
        => 여러가지 편의 기능을 모아둔 모듈
        => util.promisifiy : 콜백 패턴을 Promise 패턴으로 변경해준다.

    13) worker_threads 모듈
        => html5에서 Web Worker라는 스레드 관련 API가 추가됨.
           이를 쉽게 사용하게 해주는 모델

        => node는 14버전까지는 싱글스레드 기반 - 하나의 스레드만 만들어서 사용자의 요청을 순서대로 처리했음
           14버전 이후 부터 멀티 스레드 지원
           --> express 모듈로 웹 서버를 만들면 멀티 스레드 형식으로 요청을 처리해준다.

    14) child_process 모듈
        => 다른 프로세스(명령어) 모델을 실행하는 모듈
           이 모듈을 사용하게 되면 운영체제 별로 분기를 해서 명령어를 처리해야 한다. --> 같은 역할을 하는 것이지만 os마다 다르기 때문

5. 모듈이지만 중요한 암호화 모듈들
    => crypto 모듈을 암호화에 하용
    
    1) 암호화 방식(암호화된 문장을 다이제스트라고 표현함.)
       
       단방향 암호화 : 암호화는 가능하지만 암호화된 문장을 이용해서 복호화 하는 것은 불가능하지만 원본 데이터와 비교는 가능하다.
                      동일한 문장을 암호화하면 동일한 결과를 만들기 때문이다.
                      
                      해시기법 : 문자열을 고정된 길이의 다른 문자열로 만드는 방식  --> 주로 사용한다.
                      
                      알고리즘으로는 md5, sha1, sha256, sha512 등이 사용되는데 md5와 sha1은 취약점이 발견되서 거의 사용하지 않는데
                      안드로이드에서 가끔 sha1 알고리즘을 사용한다.
                      블록체인에서는 sha256을 사용하다가 sha512로 변환 중이다. 

                      주로 비밀번호를 저장이나 블록체인에서는 단방향 암호화를 주로 이용한다. --> User의 정보를 서버관리자가 알 수 없게

                      createHash(알고리즘): 사용할 알고리즘 설정
                      update(문자열): 변환할 문자열을 설정
                      digest(인코딩 방식): 인코딩할 알고리즘 선택 주로 base64를 사용한다.

                      const crypto = require("crypto");

                      let password = '1234';

                      // 단방향 암호화 수행
                      let p1 = crypto
                        .createHash("sha256")
                        .update(password)
                        .digest('base64');
                      ==> 암호화 될 문장의 길이와 상관없이 암호화된 문장의 길이는 같다.

       
       양방향 암호화 : 암호화 할 때 key를 사용해서 암호화 하는 방식으로 복호화 할 수 있는데 암호화 할 때 사용한 키와 복호화 할 때 사용한
                      키가 같아야만 복호화가 가능하다.
                      동일한 데이터를 암호화 했을 때 암호화된 결과가 다를 수 있다.
                      이 데이터는 비교연산을 잘 하지 않고 복원해서 사용하는 경우가 많다.
                        
                      주로 일반 데이터 암호화에 이용한다. -> 주민등록번호, 이메일, 전화번호
                      <https / http 가 자동으로 통신간에 이를 해준다.>

                      createCipheriv(알고리즘, 키, 초기화벡터) : 양방향 암호화 객체 생성
                      암호화객체.update(암호화할 문자열, 문자열 인코딩 방식 - utf8, 인코딩 방식 - base64) : 문자열이 반환된다.
                      암호화객체.final(출력 인코딩 방식) : 암호화가 완료됨

                      createDecipheriv(알고리즘, 키, 초기화 벡터) : 양방향 복호화 객체 생성 - 암호화할 때사용한 것을 그대로 대입
                      복호화객체.update(암호화할 문자열, 인코딩 방식 - base64, 문자열 인코딩 방식 - utf8) : 문자열이 반환된다.
                      복호화객체.final(출력 인코딩 방식) : 복호화가 완료됨

                      // 암호화된 모듈 가져오기, 다른 파일이면 우선 모듈부터 가져옴
                      // const crypto = require("crypto");

                      const alg = "aes-256-cbc";

                      // node의 crypto 모듈에서는 key는 32자리 iv는 16자리
                      const key = "12345678901234567890123456789012";
                      const iv = "1234567890123456";

                      // 암호화 객체 생성
                      const cipher = crypto.createCipheriv(alg, key, iv);
                      let result = cipher.update('01033189397', 'utf-8', 'base64');
                      result += cipher.final('base64');
                      console.log(result);
            
6. 파일 시스템
    => 파일 읽고 쓰기
    => 파일을 읽고 쓰기 위한 모듈은 fs
    
    1) 파일읽기
       
       fs.readFile('파일경로', [options], 콜백함수) : 비동기 방식으로 읽음
       콜백함수는 매개변수가 두개인데 첫번째 매개변수는 에러가 발생했을 때 에러 내용을 가지고 있고 두번째 매개변수가 읽기에 성공했을 때
       읽어낸 데이터

       fs.readFileSync('파일경로', [options]) : 동기식으로 읽어내고 읽어낸 데이터를 반환

    2) Buffer
        
        => buffer: 데이터를 저장하기 위한 메모리
        => buffering: 데이터를 한꺼번에 처리하기 위해서 데이터를 모으는 작업
        => readFile 이라는 함수는 읽어내고 난 후 Buffer 객체를 반환한다.
        => Buffer 객체에는 크기를 알려주는 length 속성 그리고 문자열을 Buffer로 변경하는 from 함수나 Buffer의 내용을 문자열로 변환하는 
           toString 함수 등이 있다.

    3) 변경 가능하거나 변하지 않는 중요한 문자열은 파일이나 DB에 저장해 읽는 방식을 사용해야한다.
       => 운영환경과 개발환경이 다른 경우 소스코드 수정 시 컴파일, 빌드 과정을 다시 해야한다.
          let dataBaseUrl = "127.163.0.30

       => 파일에 기록 -> 소스코드에서 파일의 내용을 읽는 방식이 다르다
       => 클라이언트에 배포하는 프로그램을 만든 경우라면 대부분 언어는 역어셈블익이 가능하다.

*** 연습문제 :: 이전에 양방향 암호화할 때 사용했던 key와 iv값을 텍스트 파일에 저장하고 이를 읽어서 적용하는 형태로 변경

    4) Stream
        => 데이터의 흐름
        => 데이터를 일정한 크기로 잘라서 여러번에 나눠서 처리
           용량이 큰 파일을 한 번에 읽어내려고 하면 버퍼의 크기가 너무 커져서 메모리 부담이 생기게 됨 
           이렇게 작게 잘라서 처리하는 것을 chunk라고 한다, 보통 로그 파일을 읽을 때 이런 방식을 사용한다.
        => 스트리밍 : 일정한 크기의 데이터를 지속적으로 전달하는 작업
        
        => fs 모듈의 createReadStream 메서드나 createWriteStream 메서드를 이용해서 스트림을 생성
           -> 파일경로와 highWaterMark 옵션을 이용해 버퍼의 크기를 설정

        => 읽기 스트림의 경우는 data(하나의 버퍼를 읽었을 때 발생), end(읽기가 끝났을 때 발생), err(오류 발생) 이벤트를 처리한다.
        => 쓰기 스트림의 경우 drain(한부분 완료), finish(모두 완료), error 이벤트를 처리한다.

        => 스트림을 이용한 읽기

    5) 기타 함수
        => access(경로, 옵션, 콜백): 디렉토리나 파일에 접근할 수 있는지 확인
        => mkdir(경로, 콜백): 경로를 생성
        => open(경로, 옵션, 콜백): 경로의 파일을 열고 아이디를 반환하는데 파일이 없으면 생성
        => rename(기존경로, 새경로, 콜백): 이름 변경
        => unlink(경로, 콜백): 파일 지우기
        => rmdir(경로, 콜백): 디렉토리 제거
    위의 함수들은 콜백시 에러 객체를 넘겨 받는다, 에러 객체가 존재하면 에러가 발생한 것이고 그렇지 안으면 에러가 발생하지 않은 것.

7. ThreadPool : 4개씩 만들어서 사용
    => pool : 만들어서 모아놓은 것, 
    => pool은 서버에서 사용 
    => server : 요청을 처리하고 응답을 전하는 쪽, 속도나 효율을 중요시 자주 사용되는 것들은 미리 만들어두고 사용을 바로 할 수 있도록 한다
    => client : 요청을 전송하고 응답을 출력하는 쪽, 신뢰성이나 가용성을 중요시 메모리 효율을 높여야 하기 때문에 사용하기 전에 만드는 것을
                권장한다.
    
    => Thread Pool : Thread(작업중 다른 작업을 할 수 있도록 하는 작업 단위 - 독자적으로 실행 불가)를 미리 미나들어서 모아놓은 것
                     (독자적으로 실행 가능한 작업단위는 Process, Thread는 Proces안에 존재하는 실행단위)
    
    => node에서는 몇몇 작업에 한해 ThreadPool을 이용해서 처리
       fs(파일 입출력), crypto(암호화 모듈), zlib, dns, lookup 등이다.
       - 비동기나 스레드 형태로 처리하는 작업들은 일반적으로 오랜 시간이 걸리는 작업들이다.
       - 가장 오래 걸리는 작업들 -- 파일입출력, 네트워크 입출력(스레드 사용X시 reject) 
       - node에서 파일을 비동기적으로 읽거나 암호화를 하게 되면 순서대로 처리가 안되는 경우가 많다.

8. Node에서 이벤트 처리

    1) 이벤트 연결
       객체.addEventListener("이벤트 이름",함수)
       객체.on("이벤트이름", 함수)

       객체.once("이벤트 이름", 함수) // 이벤트가 처음 발생할 때만 함수를 수행하고 다음부터는 수행 X

    2) 이벤트 삭제
       객체.removeEventListener("이벤트이름", 함수) // 함수만 제거
       객체.removeAllEventListener("이벤트 이름") // 모든 함수 제거해야하고
    
    3) 이벤트 강제 발생
       객체.emit("이벤트 이름");

    4) 이벤트에 10개 이상의 함수를 연결하고자 하는 경우
       => 기본적으로 에러이나 객체.setMaxListener(개수)를 호출하면 개수만큼 연결이 가능하다.

9. 예외처리
    => 예외가 발생하게 되면 프로그램이 중단된다, 서버는 아주 위험한 예외가 아니라면 프로그램이 중단되면 안된다.
       서버프로그래밍에서는 대다수의 코드를 예외처리 구문 안에 삽입을 해서 예외가 발생하면 예외를 기록하고 계속 작업을 수행 하도록
       해야한다.
     
     try {
        // 예외 발생가능성이 있는 코드 
     }catch(예외객체) {
        예외가 발생했을 때 수행할 내용
     }finally{
        예외 발생 여부와 상관없이 수행할 동작
     }
     // catch와 finally중 하나는 생략 가능하다.
     => 학습시에는 catch 블럭에서 예외를 확인하는 코드를 작성하지만 실무에서는 예외를 기록하고 알람을 준다.
        예외 구문 만들고 예외 발생시 금일날짜로 로깅파일 만들기
     
     1) 예외처리의 목적
        => 예외가 발생하더라도 계속 동작하기 위해서, 예외를 로깅하기 위해서
    
     2) 예외 객체의 멤버
        => name: 예외 이름
        => message: 예외에 대한 설명
    
     3) 강제로 예외 발생
        => throㅈ new Error("예외 메시지")
    
     4) 노드에서 예외가 발생해도 예외처리를 하지 않아도 되는 경우
        노드에서는 예외가 발생할 만한 모듈함수에 거의 처리를 해두었다.
        => 콜백함수의 매개변수가 예외 객체인 경우는 예외 처리를 하지 않아도 된다.
           이미 예외처리 구문으로 감싸져 있고 예외 객체를 넘겨주므로 예외객체의 존재 여부를 가지고 예외 발생 여부를 판단해서 작업만
           작성하면 된다

10. 자주 발생하는 에러
    => 터미널에서 명령어를 입력했을 때 command not found에러
       -> 명령어를 잘못 입력했거나 명령어가 없거나 명령어가 있는 곳을 path라는 환경변수에 설정하지 안은 경우
    
    => 코드를 작성한 후 실행 할 때 모듈이름 is not defined
       모듈을 가져오지 않았거나 모듈 이름을 잘못 기재한 경우
    
    => 실행하다가 EADDRINUSE : 이미 포트를 사용 중인 경우, 포트를 사용중인 프로세스를 종료하고 수행

    => 프로세스 종료 
        Windows : taskkill /pid 프로게스 아이디 /f
        그 이외 :  kill -9 프로세스 아이디

    => 포트를 사용중인 프로세스 찾기
        Windows: netstat -ano | fubdstr 포트번호
        그 이외 : lsof -l tcp : 포트번호

11. NPM(Node Package Manager)
   => 노드에서 패키지 매니저인데 지금은 거의 모든 JS라이브러리들이 저장소에 있기 때문에 JS라이브러리들은 거의 모두 NPM을 용해서 사용

   1) package.json
      => 노드에서 패키지 관리를 위한 설정파일
      => java에서 build.gradle이나 pom.xml의 역할을 수행
      => 패키지를 설치하게 되면 패키지에 대한 정보가 전부 작성된다.
         패키지를 설치하게 되면 package-lock.json파일이 생성되는데 package.json에는 직접 설치한 패키지에 대한 정보만 기재
         package-lock.json에는 의존관계가 있는 모든 패키지가 기재되어 있다.

   2) 패키지 설치
      => npm install 패키지이름 나열 (나열할 때는 공백으로 구분) 
      => 개발 과정에서만 사용하고 배포할 때 제외하려면 패키지 이름 앞에 --save-dev를 추가 하면 된다.
      => 모든 프로젝트에서 사용할 수 있도록 하기 위해서는 패키지 이름앞에 -g를 추가해 global모드로 설치하면 되는데, 현재는 경고가 발생해
         --location=global로 설정하기를 권장한다.
         Mac, Linux에서 global로 설치할 때는 맨 앞에 관리자 모드를 의미하는 sudo를 추가해야한다.(sudo npm install --location=global 패키지이름)
         처음 한 번은 관리자 비밀번호를 입력되야 한다.
      
      => 설치된 패키지는 프로젝트 내의  node_modules라는 디렉터리에 저장되며, 전역으로 설치했는데 패키지가 잘 불러지지 않으면 로컬로 설치해서
         사용하면 된다.
         전역설치 된 패키지가 잘 동작하지 않는 이유중 하나는 node명령에 대한 path설정이 안되었거나 node 설치에 이상이 있을 가능성이 높다.         

   3) 패키지 설치
      => 프로젝트 생성 -> package.json 만들어졌는지 확인

P.S. 
1) Web Server : 다른 곳에서 URL을 이용해서 사용할 수 있도록 해주는 서버 (일을 직접하는 것이 아니라 리소스에 접근하게 해준다.)

2) Web Application Server :  URL과 작업을 매핑해서 URL을 호출하면 작업을 수행하도록 해주는 서버 - JAVA에는 Tocat/Jeuse

3) Application Server : 실제 필요한 작업을 해주는 서버

   4) 패키지 재설치
      => 모든 패키지는 node_modules에 다운로드 받아서 저장하게 되는데 배포를 하거나 코드를 가지고 갈때 node_modules를 포함 시키면 크기가
         너무 커져서 이런경우는 node_modulessms 복사하지 않고 .gitignore에 올리고 나중에 package.json에 사용된 모듈의 기록만 있다면 
         프로젝트를 새로운 디렉터리에 옮겨 npm init, npm install을 하면된다.

   5) 패키지 버전
      => Major Version, Minor Version, Patch
      => Major Version이 변경되는 경우에는 하위버전과 호환이 안될 수 있다, Minor Version은 기능이 변경된 경우
         Patch는 오류를 수정했을 때 변경됨
      => 버전 이름에 alpha나 beta가 붙으면 테스트 버전이다.

   6) npm 관련 명령어
      - npm uninstall 패키지이름 : 패키지 삭제
      - npm search 검색어 : 패키지검색
      - npm publish : 패키지 배포
      - npm unpublish : 배포 취소(12시간 이내)
      => npm 명령어는 https://docs.npmjs.com에서 확인 가능

** node를 이용한 웹 서버 만들기 - 대부분은 이 방법을 사용하지 않고 express 모듈을 이용하는 경우가 많다 **

1 - 최근 Web
   => web 3.0
      Sementic Web 개념 등장: 로봇이 정보자원의 뜻을 이해하고 논리적 추론까지 가능, 명확한 의미 전달이 중요 -> REST API
      속도의 변환
      인공지능의 등장(in Web)
      자신만의 컨텐츠나 정보를 구성할 수 있도록 하는 사용자의 권한이 증가했다.
      블럭체인

   => WOA(Web Oriented Architecture)_웹 기반 아키텍쳐
       사용자의 요구 사항 변경 -> 여러 디바이스를 사용하고 각 디바이스끼리 끊김 없는 서비스에 대한 요구가 증대되면서 이를 구현하기 위한 
                                 방법으로 웹 기술이 각광받고 있음.
                                 
       기술의 변화 -> 인프라 측면에서는 클라우드나 가상화 기술이 각광을 받고있고 SW 측면에서는 WOA(전체 시스템 아키텍쳐를 웹 중심으로 설계.)

       Framework를 이용한 애플리케이션 개발 < 국내는 카카오나 네이버에서 공급하는 서비스가 많다 -> 프로그램이 커지고 있다. >
         --> 확장성을 위해서 잘 만들어야 한다, 한 개발자의 역량 요구가 높아지고 있다.(클린코드, 디자인패턴 .. 확장성 지향.)

2 - 웹 서비스 구축 방식
   1) 정적 웹 서비스
      => 요청이 오면 요청에 해당하는 HTML 페잉지를 찾아서 출력하는 방식
   
   2) CGI(Common Gateway Interface)
      => 클라이언트의 요청이 오면 서버가 작업을 수행해서 결과를 전송하거나 화면을 전송하는 방식
      => Perl이 시초
      => 이 방식은 사용자의 요청을 별도의 프로세스로 만들어서 처리, 하나의 요청을 전부 처리하기 전까지는 다른 요청을 처리할 수 없음
         Perl이나 ASP가 이런 형태로 동작

   3) Application Server 방식
      => 사용자의 요청을 Thread를 만들어서 처리
      => 여러 사용자의 요청을 한꺼번에 처리하는 것 처럼 처리

         JAVA -> Servlet(JSP) -> Spring Faremwork
         C# -> asp.netstat
         JavaScript -> Node.js Faremwork
         PHP -> Laravel Framework
         Phython -> Flask or Django Framework
         Ruby -> Rails

   4) 웹 프로그래밍의 구조
      웹 브라우저 <-> 웹 서버 <-> 애플리케이션 서버(Controller, Service, Repository) <-> 데이터 저장소
     
      => 언어나 프레임 워크는 애플리케이션 서버를 만들기 위한 기술
      => Serverless는 서버가 없는 것이 아니라 서버를 직접 구현할 필요가 없다는 뜻.(애플리케이션 서버를 구현하지 않고 다른곳에서 만든것을 사용.)
      => 웹 브라우저에서 서버에게 요청하는 것을 request라고 하고, 서버가 웹 브라우저에게 대답하는 것은 response라고 한다.
         어떤 웹 프로그램을 써도 같은 것 -> 무엇을 요청/응답하는지 찾아보는데 사용.

12. http 모듈
   => http모듈은 내장 모듈이므로 별도로 설치할 필요가 없음
   1) 서버생성
      http모듈.createserver((request, response) => {
         내용
      });

   2) 서버실행
      서버객체.listen(포트번호, 아이피주소); // 아이피 주소는 현재 컴퓨터에 여러 IP주소가 존재할 경우 작성

   3) 서버종료
      서버객체.close();

   4) 서버에서 발생하는 이벤트
      request: 클라이언트의 요청이 있을 때
      connection: 클라이언트가 접속했을 때
      clientError: 클라이언트 오류가 발생했을 때
   
   5) request객체
      => url: 클라이언트의 요청 경로
              요청경로를 만들 때는 이해하기 쉬운 경로를 만달어 줘야 하고 _는 사용하지 않는 것을 권장.

      => method: 요청방식(GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD 등)

         GET : 서버 자원을 가져올 때 사용(READ)
         POST : 서버에 자원을 등록하고자 할 때(CREATE)
         PUT : 서버 자원을 수정하고자 할 때 사용(UPDATE)
         PATCH : 서버 자원의 일부분만 수정하고자 할 때 사용(UPDATE_권장하지는 않는다.)
         DELETE : 서버 자원을 삭제하고자 할 때 사용(DELETE)
         OPTIONS : 요청하기전 통신 옵션을 설명하기 위해서 사용

   
   6) 웹 서버 만들고 직접 응답을 생성하기
      // http모듈로 서버 만들기
         const http = require("http");

         // 서버생성, 포트번호는 일반적으로 1024번까지는 예약되어 있으므로 사용X, 1521, 3306, 27017 번은 DB에서 사용하고 있음
         // 8080은 tomcat 같은 webcontainer가 사용,
         // 80번을 사용할 경우 http 경우 포트 번호 생략
         // 433번을 사용할 경우 https라면 포트번호 생략
         http.createServer((request, response) =>{
            // 응답생성
            response.writeHead(200, {'Content-type':'text/html;charset=utf-8'});
            response.write("<h1> 처음만든 웹 서버</h1>");
            response.end('<p>http 모듈 사용</p>')
         }).listen(8000, () => {
            console.log('8000번 포트에서 서버 대기 중');
         });
      => 서버를 실행 한후 8000번 포트에서 서버 대기 중 확인 후
      => 클라이언트 접속은 브라우저를 실행하고 url에 본인의 컴퓨터인 경우 http://localhost:5000 or http://127.0.0.1:8000
         다른 컴퓨터인 경우 http://서버컴퓨터IP:포트번호 로 접속(서버 컴퓨터 방화벽이 해제되어 있어야한다.)
      
      => 서버중지는 터미널에서 ctrl+c, 안되면 메시지 확인.
   
   7) 서버에서 html 파일을 읽어서 출력
      const fs = require("fs").promises;
      const http = require("http");
      http.createServer(async(request, response) =>{
         try{
            //파일의 내용을 읽어서 data에 저장
            // 다음 명령은 이명령이 끝난 뒤시행
            
            const data = await fs.readFile("./HttpServerIndex.html");
            response.writeHead(200, {'Content-type' : 'text/html; charset=utf-8'});
            response.end(data);
         } catch(errro){
            const data = await fs.readFile("./HttpServerIndex.html");
            response.writeHead(500, {'Content-type' : 'text/html; charset=utf-8'});
            response.end(error.message);
         }

      }).listen(8000, () => {
         console.log('8000번 포트에서 서버 대기 중');
      });
    => 포트번호가 같은 서버를 동시에 띄우면 에러발생.

13. REST(Representaitonal State Trancfer) API
   => 서버의 자원을 정의하고 자원에 대한 URL을 지정하는 방법
   => URL과 Method 만으로 작업을 예측할 수 있도록 하는 것 -> Restful하다
      URL은 /member이고 Method가 POST라면 회원가입임을 예측 가능하게 하는 것.

   => 클라이언트의 종류에 상관없이 동일한 작업은 동일한 URL로 처리
      클라이언트 애플리케이션을 서버 애플리케이션과 분리해서 구현하고 서버는 클라이언트의 뷰를 만들지 않고 데이터를 전송한다.
      클라이언트 애플리케이션과 서버 애플리케이션을 하나의 프로젝트로 구현하면 모바일 기기의 Native Application과 Web Browser의
      요청에 응답하는 부분을 동일한 URL로 처리할 수 없게 된다.

      --> 아이폰에서 회원가입 url과 method가 /member와 POST라면 안드로이드에서 또한 동일해야하고 Web Browser에서도 동일한 
          URL로 처리되어야 한다.
          이렇게 만들어진 서버는 RESTful하다고 한다.

14. axios 라이브러리
   => 브라우저나 Node.js에서 Promise API를 이용해서 HTTP 비동기 통신을 할 수 있도록 해주는 API
   => JS의 fetch api를 사용하기 쉽게 해주는 라이브러리
   
   =>        [axios 라이브러리]                   VS                    [fetch api]
             별도로 설치                                                설치할 필요 없음
             XSRF 보호 제공                                             별도로 제공하지 않는다.
             응답을 받으면 결과는 Json을 파싱한 결과                     .json()을 호출해야 파싱된 결과를 만들 수 있음
             요청을 취소할 수 있고 타임아웃 설정 가능                     타임아웃기능은 없음
             download 진행중을 확인할 수 있음                            download 진행 확인 불가 

   => XSRF(Cross-Site Request Forgery): 쿠키만으로 인증하는 서비스의 취약점을 이용해 사용자가 모르게 서비스에 특정 명령을 요청하는 것
                                        브라우저에서 삽입하겠다고 요청을 하기 위해 form을 조회 했는데 이 form의 URL을 복사해서 기기에서
                                        데이터를 삽입하는 작업을 수행하는 것이 대표적
                                        axios 에서는 form태그에 해쉬 값을 넘겨 이를 확인하는 방식으로 방지한다.
   
   => Promise를 이용한 사용
      const axios = require("axios");
      axios.요청메서드(url)
               .then((response) => {
                  // 가져오는데 성공했을 때 수행할 내용
                  // response는 가져온 데이터를 파싱한 결과
               })
               .catch((error) => {
                  // 에러가 발생했을 때 수행할 내용
                  // error는 에러에 대한 내용을 저장한 객체
               })
               .then(() = > {
                  // 성공과 실패 여부 상관없이 추가적으로 수행할 내용
               });

15. Cookie와 Session
   => HTTP나 HTTPS는 상태가 없다.
      클라이언트가 서버에게 요청을 할 때 일시적으로 연결이 된 후 서버가 응답을 하고 나면 견결이 해제 되버리기 때문에 다음 연결이 될 때는
      이전에 어떤 상태였는지 알 수 없음
      -> 클라이언트와 서버가 이전에 어떤 상태였는지 알 수 있도록 하기 위해서 Cookie와 Session의 개념을 사용
   
   => Cookie
      클라이언트에 저장해서 클라이언트가 서버에게 요청할 때 마다 전송되는 객체
      쿠키는 http나 https 요청의 헤더에 저장하고 이름-값 의 구조를 가지고 있다.
      Node의 http 모듈에서는 response.writeHead(코드, {'Set-Cookie':'쿠키이름 = 값'})의 형태로 작성하고 
      쿠키가 여러개 라면 response.writeHead(코드, {'Set-Cookie':'쿠키이름 = 값; 쿠키이름 = 값; 쿠키이름 = 값;.....'})와 같이 작성

      쿠키의 옵션으로는 이름, Expries(만료시간 - 날짜), Max-age(만료시간 - 초단위), Domain(도메인), Path(URL), Secure(HTTPS인 경우만 전송)
                       HttpOnly(JS에서 수정 못하도록 하는 경우 작성)
      ** 쿠키나 세션의 Domain 옵션은 어떤 데이터 a를 해당 옵션에 설정하면 A서비스에서 사용한 a의 데이터를 B, C, D, ..서비스에서도 
         사용할 수 있다.
         Secure은 브라우저에서 안전하지 않은 사이트 라고 안내하는 것과 같은 기능에 사용되는 앞선 예시처럼 브라우저 자체가 달아둠

   => Session
      클라이언트의 정보를 서버에 저장하는 기술, 클라이언트에 저장하게 되면 노출이되고 이를 수정할 수 있기 때문에 보안에 취약하기 때문에 사용
      노출이 되면 안되는 데이터를 서버에 저장하고 클라이언트는 이 정보를 구별할 수 있는 세션 키만 저장.
      
      클라이언트와 서버가 동일한 도메인인 경우에만 사용할 수 있다. -> 쿠키를 이용하면 클라이언트와 서버의 도메인이 달라도 가능하다.
      주로 로그인 정보를 저장하는데 많이 이용했다, 최근에는 JWT(Json Web Token)를 이용하는 것을 권장하기 때문에 사용빈도는 낮아졌다.

   => Cookie의 대안
      Web Storage, Web SQL, Indexed DB같은 HTML5 API를 이용하기도 한다.

16. https 모듈
   => http 서버를 https로 변경하기 위한 모듈
   => https는 암호화를 위한 인증서가 필요 - 유료나 무료로 인증서를 발급받아야 해당 모듈을 사용하는 것이 가능
      https는 데이터가 암호화되서 전송되기 때문에 중간에 가로채도 변경할 수 없다.
      https를 사용하면 데이터 전송간에는 암호화를 할 필요가 없는데, 개발자들은 혹시 모르니 해야한다고 한다.
   
   => 최근에는 브라우저에서 https 서버가 아니면 접속을 못하도록 하기도 한다.
   => 스마트 폰에서는 http에 접속하려면 별도의 설정을 추가해야 한다.
   => https 모듈의 속도를 개선한 https2 모듈도 있다.

17. cluster
   => CPU 코어를 전부 사용할 수 있도록 해주는 모듈
   => 여러개의 연산을 동시에 수행할 수 있도록 해주는 모듈
   => 직접 서버 설정을 한다면 사용하지만 최근처럼 cloud 를 사용하는 경우는 직접 설정하지 않음
   