
** Node Express
=>Node 라이브러리 중에서 웹 애플리케이션 서버를 만드는 가장 많이 이용하는 라이브러리
1.Middle Ware - Filter, AoP
=>클라이언트의 요청을 처리하기 전이나 처리 한 후에 공통으로 해야 할 작업을 미리 만들어두고 사용하는 것

1)세션 활용
=>Session
클라이언트의 정보를 서버에 저장하는 객체
기본적으로 서버의 메모리에 만들어 짐
세션이 크거나 많아지면 서버의 메모리에 부담을 주게되서 서버의 성능을 저하시킬 수 있기 때문에 파일이나 데이터베이스에 저장하는 것을 고려할 필요가 있음

=>설치한 패키지
npm install express
npm install express-session
npm install morgan
npm install cookie-parser

npm install --save-dev nodemon

=>화면에 출력하기 위한 HTML 파일 생성 - index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>메인 화면</title>
</head>
<body>
    <h1>Node - Express Web Server</h1>
</body>
</html>

=>서버의 메모리에 세션 생성 - app.js
//웹 서버 모듈 가져오기
const express = require('express');

//웹 서버 객체 생성 과 포트 설정
const app = express();
app.set('port', 3000);

//사용자의 요청 처리
//요청처리 메서드는 get, post, put(patch), delete, options
/*
app.요청처리메서드(url, (req, res) => {
    //처리

    //응답
    //send(직접 출력 내용 작성)
    //sendFile(html 파일 경로)

    //json(JSON 데이터) - 서버 랜더링을 하지 않음

});
*/

const path = require('path'); //절대 경로 생성을 위해서 사용
//세션 사용을 위한 모듈을 가져오기
const session = require('express-session');

//세션 사용을 위한 미들웨어 장착
//req.session 으로 세션 객체 사용이 가능
app.use(session({
    secret:"keyboard cat",
    resave:false,
    saveUninitialized:true
}));

//포트번호(localhost:3000 -> ContextPath) 까지 요청 처리
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, './index.html'));
});

//웹 서버 실행
app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 서버 대기 중');
});

=>세션을 메모리에 저장하게 되면 재사용이 안되고 다른 서버 와의 공유도 어렵기 때문에 세션을 파일에 저장해서 공유하고 재사용 가능하도록 만들 수 있습니다.

필요한 의존성을 설치
npm install session-file-store

app.js 파일에 설정을 추가하고 session 설정 미들웨어를 수정

//웹 서버 모듈 가져오기
const express = require('express');

//웹 서버 객체 생성 과 포트 설정
const app = express();
app.set('port', 3000);

//사용자의 요청 처리
//요청처리 메서드는 get, post, put(patch), delete, options
/*
app.요청처리메서드(url, (req, res) => {
    //처리

    //응답
    //send(직접 출력 내용 작성)
    //sendFile(html 파일 경로)

    //json(JSON 데이터) - 서버 랜더링을 하지 않음

});
*/

const path = require('path'); //절대 경로 생성을 위해서 사용
//세션 사용을 위한 모듈을 가져오기
const session = require('express-session');
//세션을 파일에 저장하기 위한 모듈 가져오기
const FileStore = require('session-file-store')(session);

//세션 사용을 위한 미들웨어 장착
//req.session 으로 세션 객체 사용이 가능
app.use(session({
    secret:"keyboard cat",
    resave:false,
    saveUninitialized:true,
    store: new FileStore()
}));

//포트번호(localhost:3000 -> ContextPath) 까지 요청 처리
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, './index.html'));
});

//웹 서버 실행
app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 서버 대기 중');
});

실행해서 sessions 라는 디렉토리가 만들어지는지 확인해보고 브라우저 접속했을 때 파일이 만들어지는지 확인

=>세션을 데이터베이스(Maria DB - 다른 데이터베이스도 가능)에 저장하는 것이 가능
데이터베이스에 접속해서 테이블을 생성
create table session(
	sid varchar(100) primary key not null,
	session varchar(2048) default '{}',
	lastSeen datetime default now()
);

npm install express-session-mariadb-store

app.js 수정
//웹 서버 모듈 가져오기
const express = require('express');

//웹 서버 객체 생성 과 포트 설정
const app = express();
app.set('port', 3000);

//사용자의 요청 처리
//요청처리 메서드는 get, post, put(patch), delete, options
/*
app.요청처리메서드(url, (req, res) => {
    //처리

    //응답
    //send(직접 출력 내용 작성)
    //sendFile(html 파일 경로)

    //json(JSON 데이터) - 서버 랜더링을 하지 않음

});
*/

const path = require('path'); //절대 경로 생성을 위해서 사용
//세션 사용을 위한 모듈을 가져오기
const session = require('express-session');
//세션을 파일에 저장하기 위한 모듈 가져오기
const FileStore = require('session-file-store')(session);
//세션을 MariaDB에 저장하기 위한 모듈 가져오기
const MariaDBStore = require('express-session-mariadb-store');

//데이터베이스 접속 정보
var options = {
    host:"192.168.0.163",
    port:3306,
    user:"root",
    password:"wnddkd",
    database:"adam"
}

//세션 사용을 위한 미들웨어 장착
//req.session 으로 세션 객체 사용이 가능
app.use(session({
    secret:"keyboard cat",
    resave:false,
    saveUninitialized:true,
    store: new MariaDBStore(options)
}));

//포트번호(localhost:3000 -> ContextPath) 까지 요청 처리
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, './index.html'));
});

//웹 서버 실행
app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 서버 대기 중');
});

2)미들웨어 사용
   =>설치: morgan, cookie-parser, dotenv 설치
   npm install morgan cookie-parser dotenv

   =>프로젝트에 .env 파일(여기에 작성된 내용은 node 프로그램에서 process.env.이름으로 사용 가능)을 생성하고 작성
   COOKIE_SECRET=keyboard
   PORT=3000

   =>app.js 수정
   //웹 서버 모듈 가져오기
   const express = require('express');

   //.env 파일의 내용을 읽어서 process.env에 저장해주는 모듈
   const dotenv = require('dotenv');
   //.env 읽어오기
   dotenv.config();

   //웹 서버 객체 생성 과 포트 설정
   const app = express();
   app.set('port', process.env.PORT);

   //로그 출력
   const morgan = require('morgan');
   app.use(morgan('dev'));

   //post 방식의 파라미터를 읽을 수 있도록 설정
   app.use(express.json());
   app.use(express.urlencoded({extended:false}));

   //쿠키 사용이 가능하도록 설정
   const cookieParser = require("cookie-parser");
   app.use(cookieParser(process.env.COOKIE_SECRET));

   //사용자의 요청 처리
   //요청처리 메서드는 get, post, put(patch), delete, options
   /*
   app.요청처리메서드(url, (req, res) => {
      //처리

      //응답
      //send(직접 출력 내용 작성)
      //sendFile(html 파일 경로)

      //json(JSON 데이터) - 서버 랜더링을 하지 않음

   });
   */

   const path = require('path'); //절대 경로 생성을 위해서 사용
   //세션 사용을 위한 모듈을 가져오기
   const session = require('express-session');
   //세션을 파일에 저장하기 위한 모듈 가져오기
   const FileStore = require('session-file-store')(session);
   //세션을 MariaDB에 저장하기 위한 모듈 가져오기
   const MariaDBStore = require('express-session-mariadb-store');
   const { urlencoded } = require('express');

   //데이터베이스 접속 정보
   var options = {
      host:"192.168.0.163",
      port:3306,
      user:"root",
      password:"wnddkd",
      database:"adam"
   }

   //세션 사용을 위한 미들웨어 장착
   //req.session 으로 세션 객체 사용이 가능
   app.use(session({
      secret:"keyboard cat",
      resave:false,
      saveUninitialized:true,
      store: new MariaDBStore(options)
   }));

   //포트번호(localhost:3000 -> ContextPath) 까지 요청 처리
   app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, './index.html'));
   });

   //웹 서버 실행
   app.listen(app.get('port'), () => {
      console.log(app.get('port'), '번 포트에서 서버 대기 중');
   });

3)파일 업로드 처리 - multer 미들웨어
=>web service 에서 파일을 업로드할려면 multipart/form-data 형태로 데이터를 전송해야 합니다.

=>node에서 multer를 가지고 파일 업로드를 처리할 때는 4가지로 나누어서 처리합니다.
none: 파일 업로드가 없을 때
single: 하나의 파일만 업로드 될 때
array: 한번에 여러 개의 파일이 업로드 가능한데 하나의 파라미터로 업로드
fields: 여러 개의 파일을 여러 개의 파라미터로 업로드 하는 경우 사용

=>파일 업로드 처리를 할 때 파일의 이름을 유일 무일하게 변경하는 경우가 있음
이런 경우에는 UUID(유일한 문자열) 나 현재 시간을 파일 이름에 추가해서 생성하는 것이 일반적입니다.

=>실제 운영을 할 때는 애플리케이션 서버 디스크가 아닌 별도의 디스크(AWS 의 S3 서비스 나 Google의 Firebase 서비스 등)에 저장을 해야 합니다.

=>저장을 할 때 디렉토리는 미리 만들어져 있어야 합니다.

파일에 한글이 포함되어 있을 때 한글이 깨지는 문제는 파일을 업로드 할 때 파일의 원래 이름을 같이 전송해서 파일의 원래 이름을 데이터 베이스에
저장한뒤 다운로드 할 때 파일을 변경해서 저장하는 방법으로 해결 가능
코드로 해결하는 방법도 있다.

app.js 파일의 파일 업로드 설정을 변경한다.

Routing
=> 최적의 경로를 탐색하는 것
=> 사용자의 요청을 처리하는 부분을 모듈화하는 것 웹 애플리케이션 서버가 커지면 처리해야할 URL이 늘어나는데 이를 하나의 파일에서 전부 처리하면
   가독성이 떨어지게 됨으로 url을 모듈화 해서 처리
=> 라우팅 - 기본 요청과 user가 포함된 요청과 board가 포함된 요청을 분리해서 구현
            user.js 파일을 만들고 user가 포함된 요청을 처리하는 코드를 구현
            board.js파일을 만들고 board가 포함된 요청을 처리하는 코드 구현
            
            <in app.js>
            const indexRouter = require('./index');
            const userRouter = require('./user');
            const boardRouter = require('./board');

            // url과 매핑, "url"의 요청을 변수로 처리
            app.use("/", indexRouter);
            app.use("/user", userRouter);
            app.use("/board", boardRouter);

URL의 일부분을 파라미터로 사용하기
=> 최근에는 파라미터 1개인 경우 파라미터를 만들어주지않고 URL에 포함 시킨다.
=> 처리하는 URL을 설정할 때 경로/:변수명 의 형태로 작성한 후 내부에서 req.params.변수명을 사용하면 된다.


 Front Controller 패턴 
 => 클라이언트의 모든 요청을 app.js가 받아서 각각의 라우팅 파일에서 실제로 처리해준다.
    서버 애플리케이션 관련된 설정은 app.js에서 하고 실제처리는 각 라우팅 파일에서 수행하도록 합니다.
    모든 요청이 먼저 들어오게 되는 app.js를 Fornt-Controller라 하고 실제 처리를 담당하는 라우팅 파일들을 page-Controller라고 합니다.

*** 템플릿 엔진 ***
=> 서버의 데이터를 HTML에 합쳐서 출력할 수 있도록 해주는 라이브러리
=> 거의 모든 framework들이 가지고 있으며 종류가 다양함
=> 서버에서 뷰를 만들어서 클라이언트에게 제공하겠다는 의미
=> 템플릿 엔진을 사용하려면 템플릿 엔진에 대한 별도의 학습(HTML, CSS, JS 이외의 학습)이 필요하다.

1. Jade
=> 지금은 저작권 문제로 pug로 개명, https://pugsjs.org/api/getting-started.html 에서 도큐먼트 확인
=> npm install pug
=> 설정
   app.set('views',path.join(__dirname, '출력할 html파일 위치'));
   app.set('view engine', 'pug');

=> 처리
   res.render('html 파일 경로', 데이터)

=> html 파일에서 데이터를 pug 문법에 맞춰 출력
   
2. nunjucks
=> node에서 사용하는 템플릿 엔진 중 하나