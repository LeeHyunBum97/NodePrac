파일에 한글이 포함되어 있을 때 한글이 깨지는 문제는 파일을 업로드 할 때 파일의 원래 이름을 같이 전송해서 파일의 원래 이름을 데이터 베이스에
저장한뒤 다운로드 할 때 파일을 변경해서 저장하는 방법으로 해결 가능
코드로 해결하는 방법도 있다.

app.js 파일의 파일 업로드 설정을 변경한다.

Routing
=> 최적의 경로를 탐색하는 것
=> 사용자의 요청을 처리하는 부분을 모듈화하는 것 웹 애플리케이션 서버가 커지면 처리해야할 URL이 늘어나는데 이를 하나의 파일에서 전부 처리하면
   가독성이 떨어지게 됨으로 url을 모듈화 해서 처리
=> 라우팅 - 기본 요청과 user가 포함된 요청과 board가 포함된 요청을 분리해서 구현
            user.js 파일을 만들고 user가 포함된 요청을 처리하는 코드를 구현
            board.js파일을 만들고 board가 포함된 요청을 처리하는 코드 구현
            
            <in app.js>
            const indexRouter = require('./index');
            const userRouter = require('./user');
            const boardRouter = require('./board');

            // url과 매핑, "url"의 요청을 변수로 처리
            app.use("/", indexRouter);
            app.use("/user", userRouter);
            app.use("/board", boardRouter);

URL의 일부분을 파라미터로 사용하기
=> 최근에는 파라미터 1개인 경우 파라미터를 만들어주지않고 URL에 포함 시킨다.
=> 처리하는 URL을 설정할 때 경로/:변수명 의 형태로 작성한 후 내부에서 req.params.변수명을 사용하면 된다.


 Front Controller 패턴 
 => 클라이언트의 모든 요청을 app.js가 받아서 각각의 라우팅 파일에서 실제로 처리해준다.
    서버 애플리케이션 관련된 설정은 app.js에서 하고 실제처리는 각 라우팅 파일에서 수행하도록 합니다.
    모든 요청이 먼저 들어오게 되는 app.js를 Fornt-Controller라 하고 실제 처리를 담당하는 라우팅 파일들을 page-Controller라고 합니다.

*** 템플릿 엔진 ***
=> 서버의 데이터를 HTML에 합쳐서 출력할 수 있도록 해주는 라이브러리
=> 거의 모든 framework들이 가지고 있으며 종류가 다양함
=> 서버에서 뷰를 만들어서 클라이언트에게 제공하겠다는 의미
=> 템플릿 엔진을 사용하려면 템플릿 엔진에 대한 별도의 학습(HTML, CSS, JS 이외의 학습)이 필요하다.

1. Jade
=> 지금은 저작권 문제로 pug로 개명, https://pugsjs.org/api/getting-started.html 에서 도큐먼트 확인
=> npm install pug
=> 설정
   app.set('views',path.join(__dirname, '출력할 html파일 위치'));
   app.set('view engine', 'pug');

=> 처리
   res.render('html 파일 경로', 데이터)

=> html 파일에서 데이터를 pug 문법에 맞춰 출력
   
2. nunjucks
=> node에서 사용하는 템플릿 엔진 중 하나