P.S. 
Authentication[NodePrac8]

=> NodePrac8과 같은 프로젝트들은 화면 출력과 처리를 하나의 애플리케이션을 수행한다. - 서버 랜더링

=> 클라이언트의 종류가 다양하고 확장 가능성이 있는 것은 고려하지 않고 서버 랜더링(서버에서 처리하고 출력을 전달)의 형태를 활용하는 경우였다.

=> 안드로이드에서 동일한 서비스를 사용하고자 하는 경우 안드로이드 화면은 서버에서 랜더링이 불가능하기 때문에 안드로이드 프로젝트를 만들어야 하고 서버에 안드로이드를 위한 코드를 추가.
=> 이 때 안드로이드 처리를 위한 별도의 URL을 생성해서 처리하게 되면 동일한 요청에 대한 URL이 두개가 생기게 된다.(좋지 않다)

=> 서버는 처리과정을 통해 데이터만 주는 형태로 만들어서 클라이언트는 별도로 생성해서 데이터를 받아서 처리하도록 한다.
=> 이렇게 되면 클라이언트 종류가 추가 되더라도 서버는 수정할 필요가 없다.

=> 나아가 현재는 클라이언트들의 성능이 좋아졌기 때문에 어느정도의 처리도 가능하기 때문에 클라이언트에서도 처리하는 것이 늘고 있으며 이는 서버에서 처리하는 것보다 반응이 빠른편이다.(엣지 컴퓨팅)
    -> JS에 스레드 추가가 대표적인 예시다.

=> 물론 보안적인 요소가 필요한 것들은 서버에서 처리하거나 서버에서 랜더링 하는 편이다.(클라이언트에서 이 데이터가 어떻게 만들어졌는지 모르게 하기 위해서.)


P.S. 부인봉쇄
    -> 어떠한 것이든 받은 것을 받지 않았다고 하는 것을 봉쇄해야 한다.
    -> 이러한 것에 많은 고민이 되고 있다, 특히 금융권.
    -> 스마트폰은 UDP 통신을 기본적으로 하기 때문에 UDP 통신은 수신측에서 수신을 받은 적이 없다고 판단을 내리면 송신측에서 보낸적이 없는 것으로 처리된다.
    -> 카카오톡 메시지의 숫자도 부인 봉쇄의 기능을 어느정도 하고 있다.

P.S.
Client <-> Web Server <-> Application Server <-> Data Server 에서
Application Server가 랜더링을 하지않고 데이터를 제공하면 API 서버라고 하는 것으로 따로 존재하는 게 아니다.

[NodePrac9]
API SERVER
1. API (Application Programing Interface)
    => 프로그램과 프로그램을 연결시켜주는 매개체
    => 다른 애플리케이션을 개발할 수 있도록 도와주는 프로그램(Software, Development Kit) 또는 데이터
        -> JDK(Java Software Development kit)
        -> Sony SDK - Sony 디바이스의 애플리케이션을 만들 수 있도록 도와주는 프로그램
        -> Win API - Windows Application 을 만들기 위한 함수(C)의 집합

        -> 프로그램 개발에 도움을 주도록 또는 여러 프로그램에서 공통으로 사용되어야 하는 데이터가 있는 경우에는 프로그램이 아니라 데이터를 제공
            -> 누구나 등록만 하면 사용할 수 있도록 API를 만들면 Open API라고 한다.
            -> 데이터를 제공할 때는 DB에 직접 접근하도록 하는 것이 아니고 애플리케이션 서버를 통해서 제공한다.

2. API Server 가 제공하는 데이터 포맷
    1) txt 또는 csv
        => 일반 텍스트로 구분기호를 포함하는 경우가 있음
        => 변하지 않는 데이터를 제공하는데 주로 이용한다.
        => 가끔 txt나 csv 대신에 excel이나 hwp 또는 pdf로 제공하는 경우가 있지만 엄밀히 말하면 API에는 해당되진 않는다.

    2) xml
        => eXtensible Markup Language
        => 태그의 해석을 브라우저가 아닌 개발자 또는 개발자가 만든 라이브러리가 하는 형태로 문법이 HTML 보다는 엄격하다.
        => HTML은 구조적이지 못하기 때문에 데이터로 사용하기에는 부적합하다.
        => 아직도 설정파일이나 데이터를 제공하는 용도로 많이 사용한다.

    3) json
        => 자바스크립트 객체 형태로 표현하는 방식
        => XML 보다 가볍기 때문에 데이터 전송에 유리하다.
        => 자바 스크립트 객체 표현법으로 데이터를 표현하기 때문에 JS나 Python에서는 파싱하는 것이 쉽다.
        => 설정 보다는 데이터를 제공하는 용도로 많이 사용한다.
        => Apple, Google, Twitter 등은 데이터 전송에서는 json만 사용하고 있다. (naver나 kakao는 json과 xml 모두 사용하지만 설명은 json만 한다.)

    4) yaml(야믈)
        => email 표기 형식으로 표현하는 방법
        => 계층 구조를 가진 데이터 표현에 유리하다.
        => 구글의 프로그램들이 설정할 때 yaml(확장자는 yml-야믈)을 많이 사용한다. 
           (Cloud Tool이나 Block Chain Tool 구글의 tool을 많이 사용해서 언어는 Go, 설정은 Yaml을 많이 사용한다.)
        => 아직까지는 list같은 형태의 데이터 표현에는 적절하지 못해서 설정파일 외에는 사용하기 어렵다.


3. API Server를 만들기 위한 기본 설정

    1) 프로젝트 생성
        => 만들고 npm init로 node프로젝트 초기화.


    2) 필요한 패키지 설치

        => npm install express dotenv compression morgan file-stream-rotator multer cookie-parser express-session express-mysql-session mysql2 sequelize sequelize-cli nunjucks passport passport-kakao passport-local bcrypt uuid
            
            -> bcrypt는 복호화가 불가능한 암호화를 위한 모듈로 이 모듈이 있다는 뜻은 비밀번호를 저장할 목적을 가지고 있다고 생각하면 된다.
            -> uuid는 랜덤한 문자열을 생성하기 위한 모듈로 이 모듈이 있다는 것은 키를 발급할 목적을 가지고 있다고 생각하면 된다.

        => npm install --save-dev nodemon

            -> --save-dev 로 설치된 패키지나 라이브러리는 배포할 때는 패키지에 포함되지 않는다.

    3) package.json 수정
        
        "scripts": {
        "start": "nodemon App.js",
        "test": "echo \"Error: no test specified\" && exit 1"
    },

    4) 이전 프로젝트(NodePrac8)에서 routes, models, config, passport 디렉토리 복사

    5) .env 파일도 이전 NodePrac8r과 동일핟게 만들고 작성

    6) 프로젝트 화면에 출력될 파일을 저장하기 위해 views 디렉토리 생성

    7) 에러가 발생했을 때 화면에 출력될 파일을 views 디렉토리에 생성하고 작성. error.html
        
        <h1>{{message}}</h1>
        <h2>{{error.status}}</h2>
        <pre>{{error.stack}}</pre>
    
        => message는 개발자가 전달하는 문자열이다.
        => error.status 는 에러의 코드를 의미한다.
        => error.stact(stack trace)는 에러가 발생하면 에러가 발생한 부분에서 호출되는 함수를 역순으로 출력한다.
            -> 에러를 해결할 때는 맨 위에서 부터 아래로 내려오면서 자신이 작성한 코드가 있는 부분을 찾아야 한다.
            -> 그 부분을 수정하는데 그 부분에서 다른 코드를 호출하면 순서대로 역추적하여 해결해야 한다.

    8) App.js 파일 작성 후 설정 정상인지 확인

        const express = require('express');

        const dotenv = require('dotenv');
        dotenv.config();

        //서버 설정
        const app = express();
        app.set('port', process.env.PORT);

        //로그 출력을 위한 파일 과 경로를 위한 모듈 설정
        const fs = require('fs');
        const path = require('path');
        //static 파일의 경로 설정
        app.use(express.static(path.join(__dirname, 'public')));

        //view template 설정
        const nunjucks = require('nunjucks');
        app.set('view engine', 'html');
        nunjucks.configure('views', {
            express: app,
            watch: true
        });
        const morgan = require('morgan');
        const FileStreamRotator = require('file-stream-rotator');

        const logDirectory = path.join(__dirname, 'log');

        // 로그 디렉토리 생성
        fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

        // 로그 파일 옵션 설정
        const accessLogStream = FileStreamRotator.getStream({
            date_format: 'YYYYMMDD',
            filename: path.join(logDirectory, 'access-%DATE%.log'),
            frequency: 'daily',
            verbose: false
        });

        // 로그 설정
        app.use(morgan('combined', {stream: accessLogStream}));

        //출력하는 파일 압축해서 전송
        const compression = require('compression');
        app.use(compression());

        //post 방식의 파라미터 읽기
        var bodyParser = require('body-parser');
        app.use(bodyParser.json()); // to support JSON-encoded bodies
        app.use(bodyParser.urlencoded({ // to support URL-encoded bodies
            extended: true
        }));

        //쿠키 설정
        const cookieParser = require('cookie-parser');
        app.use(cookieParser(process.env.COOKIE_SECRET));

        //세션 설정
        const session = require("express-session");
        var options = {
            host: process.env.HOST,
            port: process.env.MYSQLPORT,
            user: process.env.USERID,
            password: process.env.PASSWORD,
            database: process.env.DATABASE
        };

        const MySQLStore = require('express-mysql-session')(session);

        app.use(
            session({secret: process.env.COOKIE_SECRET, resave: false, saveUninitialized: true, store: new MySQLStore(options)})
        );
        const {sequelize} = require('./models');

        sequelize
            .sync({force: false})
            .then(() => {
                console.log('데이터베이스 연결 성공');
            })
            .catch((err) => {
                console.error(err);
            });

        const passport = require('passport');
        const passportConfig = require('./passport');

        passportConfig();

        app.use(passport.initialize());
        app.use(passport.session());

        const authRouter = require('./routes/auth');
        app.use('/auth', authRouter);

        app.use('/img', express.static(path.join(__dirname, 'uploads')));
        //에러가 발생한 경우 처리
        app.use((req, res, next) => {
            const err = new Error(`${req.method} ${req.url} 라우터가 없습니다.`);
            err.status = 404;
            next(err);
        });

        //에러가 발생한 경우 처리, req, res 앞에 err가 있다면 error를 처리하는 구문이다.
        app.use((err, req, res, next) => {
            res.locals.message = err.message;
            res.locals.error = process.env.NODE_ENV !== 'production'
                ? err
                : {};
            res.status(err.status || 500);
            res.render('error');
        });

        app.listen(app.get('port'), () => {
            console.log(app.get('port'), '번 포트에서 대기 중');
        });

4. 도메인을 등록해서 등록한 도메인에서만 API 요청이 이뤄지도록 도메인과 키를 생성해서 저장

    P.S. free, Premium 과 같이 구분하고자 하는 경우에 자료형 선택
        => boolean
            -> true와 false를 이용해서 두가지만 구분해서 사용 가능하다.
        
        => int
            -> free와 premium 을 0과 1에 추가된 자료구분이 있다면, 2, 3, 등을 추가해서 사용가능하다,

        => string
            -> free와 premium을 문자열로 저장해서 구분 가능하다.

        => ** ENUM(Enum) **
            -> 정해진 데이터만 삽입이 가능하다.
            -> type varchar(100) (check type in('free', 'premium'))과 같이 DB에 check 제약조건으로 설정한 다음에 JS나 Java에서 ENUM으로 처리
            -> 무엇인가를 제한하고자 할 때 ENUM 사용하는 것을 굉장히 높게 평가한다.
            -> 마찬가지로 const나 final 과 같은 것도 변수나 함수 기타 등을 용도에 맞게 사용할 것이라는 것을 보여주는 것으로 높게 평가된다.


    1) models 디렉토리에 위의 정보(host-client URL, client Secret Key, type - Free, Premium)를 저장할 모델 domain.js를 생성

        const Sequelize = require('sequelize');

        module.exports = class Post extends Sequelize.Model {
            static init(sequelize) {
                return super.init({
                    host: {
                        type: Sequelize.STRING(100),
                        allowNull: false
                    },
                    clientSecret: {
                        type: Sequelize.STRING(36),
                        allowNull: false
                    },
                    type: {
                        type: Sequelize.ENUM('free', 'premium'),
                        allowNull: false
                    }
                }, {
                    sequelize,
                    timestamps: true,
                    underscored: false,
                    modelName: 'Domain',
                    tableName: 'domains',
                    paranoid: true,
                });
            }
            static associate(db) {
                // User와 Domain 은 1:N
                // User의 기본키가 Domain에 외래키로 저장된다.
                db.Domain.belongsTo(db.User);
            }
        };

    2) model/index.js 에 Domain 사용을 위한 domain.js 모델을 추가 한 뒤 실행하면 DB에 반영됨.(NodePrac8과 같은 DB에 domains 테이블 추가)

        const Sequelize = require('sequelize');
        const env = process.env.NODE_ENV || 'development';
        const config = require('../config/config')[env];

        const User = require('./user');
        const Post = require('./post');
        const Hashtag = require('./hashtag');
        const Domain = require('./domain')

        const db = {};
        const sequelize = new Sequelize(
        config.database, config.username, config.password, config,
        );

        db.sequelize = sequelize;
        db.User = User;
        db.Post = Post;
        db.Hashtag = Hashtag;
        db.Domain = Domain;

        User.init(sequelize);
        Post.init(sequelize);
        Hashtag.init(sequelize);
        Domain.init(sequelize);

        User.associate(db);
        Post.associate(db);
        Hashtag.associate(db);
        Domain.associate(db);

        module.exports = db;

    3) veiws 디렉토리에 로그인 화면 출력을 담당하는 login.html 작성 

        <!DOCTYPE html>
        <html>
            <head>
                <meta charset="UTF-8">
                <title>API 서버 로그인</title>
                <style>
                    .input-group label {
                        width: 200px;
                        display: inline-block;
                    }
                </style>
            </head>
            <body>
                <!-- 로그인 된 경우에 출력부-->
                {% if user and user.id %}
                    <span class="user-name">안녕하세요!
                        {{user.nick}}님</span>
                    <a href="/auth/logout">
                        <button>로그아웃</button>
                    </a>
                    <fieldset>
                        <legend>도메인 등록</legend>
                        <form action="/domain" method="post">
                            <div>
                                <label for="type-free">무료</label>
                                <input type="radio" id="type-free" name="type" value="free">
                                <label for="type-premium">프리미엄</label>
                                <input type="radio" id="type-premium" name="type" value="premium">
                            </div>
                            <div>
                                <label for="host">도메인</label>
                                <input type="text" id="host" name="host" placeholder="ex) AdamSoft.com">
                            </div>
                            <button>저장</button>
                        </form>
                    </fieldset>
                    <table>
                        <tr>
                            <th>도메인 주소</th>
                            <th>타입</th>
                            <th>클라이언트 비밀키</th>
                        </tr>
                        <!-- 기존에 등록한 도메인이 있는 경우 출력부 -->
                        {% for domain in domains %}
                            <tr>
                                <td>{{domain.host}}</td>
                                <td>{{domain.type}}</td>
                                <td>{{domain.clientSecret}}</td>
                            </tr>
                        {% endfor %}
                    </table>
                <!-- 로그인 되어있지 않은 경우 출력부 -->
                {% else %}
                    <form action="/auth/login" id="login-form" method="post">
                        <h2>NodeSNS 계정으로 로그인하세요.</h2>
                        <div class="input-group">
                            <label for="email">이메일</label>
                            <input
                                id="email"
                                type="email"
                                name="email"
                                required="required"
                                autofocus="autofocus">
                        </div>
                        <div class="input-group">
                            <label for="password">비밀번호</label>
                            <input id="password" type="password" name="password" required="required">
                        </div>
                        <button id="login" type="submit" class="btn">로그인</button>
                        <a id="join" href="http://localhost/join" class="btn">회원가입</a>
                        <a id="kakao" href="http://localhost/auth/kakao" class="btn">카카오톡</a>
                    </form>
                    <script>
                        // 에러 메시지 출력
                        // 이 페이지로 넘어올 때 loginError를 가지고오면 대화상자로 출력
                        window.onload = () => {
                            if (new URL(location.href).searchParams.get('loginError')) {
                                alert(new URL(location.href).searchParams.get('loginError'));
                            }
                        };
                    </script>
                {% endif %}
            </body>
        </html>

    4) 로그인 처리와 도메인 등록 처리를 위한 내용을 routes/index.js 파일에 작성
        
        const express = require('express');

        const {v4:uuidv4} = require('uuid');

        const {User, Domain} = require('../../NodePrac8/models');
        const {isLoggedIn} = require('../../NodePrac8/routes/middlewares');

        const router = express.Router();

        router.get('/', async(req, res, next) => {
            try{
                // 로그인한 유저가 있으면 유저의 모든 데이터를 찾아서 대입
                const user = await User.findOne({
                    where:{id: req.user && req.id || null },
                    include:{model: Domain}
                });
                res.render('login', {user, domains : user && user.Domains})
            }catch(error){
                console.log(error);
                next(error);
            }
        });

        // 도메인 등록 처리
        router.post('/domain', isLoggedIn, async(req, res, next) =>{
            try{
                await Domain.create({
                    UserId:req.user.id,
                    host: req.body.host,
                    type: req.body.type,
                    clientSecret: uuidv4()
                });
                // 삽입하고 메인 페이지로 이동
                res.redirect('/');
            }catch(error){
                console.log(error);
                next(error);
            }
        })


        module.exports = router;

    5) App.js에 routes/index.js 파일을 라우터로 사용할 수 있도록 설정
        //라우터 설정
        const indexRouter = require('./routes'); // index.js는 생략 가능
        app.use('/', indexRouter);

5. JWT(JSON Web Token)
    => https://jwt/io
    => JSON 데이터 구조로 표현한 토큰이다.
    => API Server 나 로그인을 이용하는 시스템에서 매번 인증 하지 않고 서버와 클라이언트가 정보를 주고 받을때 HttpRequest Header에 JSON 토큰을 넣은 후 인증하는 방식
    => HMAC 알고리즘을 사용하여 비밀키나 RSA 기법을 이용해 Public Key와 Private Key를 이용해서 서명한다.
    
    => 암호화 키와 해독키가 한쌍
    => 암호화 키와 해독키를 다르게 생선하는데 암호화 키는 누구나 알 수 있는 형태로 공개하지만 해독키는 비밀로 하는 방식

    => 구성
        -> HEADER : 토큰 종류와 해시 알고리즘 정보
        -> PAYLOAD : 토큰의 내용물이 인코딩 된 부분
        -> SIGNATURE : 토큰이 변조되었는지 여부를 확인할 수 있는 부분

    => 클라이언트가 서버에게 데이터를 요청할 때 domain을 json token에 포함시켜 전송하고 서버는 이를 확인해서 유효한 요청인지 판단하고 데이터를 전송한다.
    => 기존의 쿠키나 세션 말고 JWT를 사용하는 이유는 서버와 클라이언트를 분리해서 구현했을 때, 도메인/포트번호가 달라서 사용할 수 없다.
    
    => 쿠키는 동일한 도메인 내에서만 읽을 수 있다, 즉 서버와 클라이언트 애플리케이션의 도메인이 다르면 쿠키는 사용할 수 없다.
        -> 물론 설정을 하면 서로 다른 도메인/포트 간에도 쿠키를 공유할 수는 있다, 그러나 매우 위험하다.

    => 서버와 클라이언트 애플리케이션의 도메인이 다른 경우 세션을 이용해서 사용자를 인증할 수 없다.
        -> 이 때 쿠키와 세션을 사용할 수 없지만 같은 개념을 가진 Json Token 이라는 특정 키값을 만들어 이용하게 되는 것이다.
        -> 이 경우에는 서버에서 클라이언트에게 키를 발급하고 클라이언트는 서버에 요청을 할 때 키를 전송해서 인증된 사용자라는 것을 알려야한다.
        -> 이 때 키를 평문으로 전송하게 되면 중간에 가로채서 사용할 수 있다.
        -> 키 와 클라이언트 URL을 합쳐서 하나의 암호화된 문장을 생성해서 전송을 하게 되면 서버는 이를 해동해 인가된 클라리언트의 URL을 확인 할 수 있다.
        -> 다른 곳에서 문장을 탈취해 데이터를 요청한 경우 URL이 다르기 때문에 인가된 사용자가 아님을 확인할 수 있다.

    1) Node에서 JWT 인증을 위한 모듈을 설치
        => npm install jsonwebtoken

    2) .env에 파일에 암호화에 사용할 문자열을 등록

    3) /routse/middlewares.js 에서 토큰 인증 처리 함수 작성

        const jwt = require("jsonwebtoken");
        exports.verifyToken = (req, res, next) => {
        try{
            // 토큰 확인
            req.decoded = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);

            // 인증에 성공하면 다음 작업 수행
            return next();
        } catch(error){
            if(error.name === 'TokenExpiredError'){
            return res.status(419).json({
                code:419,
                message: "토큰이 만료되었습니다."
            });
            }
            return res.status(401).json({
            // 401 에러는 권한이 없음을 의미한다.
            code: 401,
            message: "유효하지 않은 토큰입니다."
            })
        }
        }
    
    4) 토큰 내용 확인 후 사용가능하게 발급처리 하는 파일인 routes/v1.js 를 작성
        const express = require('express');
        const { verifyToken } = require('./middlewares');

        const jwt = require('jsonwebtoken'); // json token 라이브러리
        const {Domain, User, Post, Hashtag} = require('../models')// model 들 불러오기

        const router = express.Router();

        // 데이터를 반환하는 요청을 처리
        router.get('/posts/my', verifyToken, (req, res, next) => {
            Post.findAll({where:{userId:req.decoded.id}})
            .then((posts) => {
                console.log(posts);
                res.json({code:200, payload: posts}); // -> 렌더링 하지 않고 json 문자열로 파싱해서 데이터를 넘겨주면 API Server
            })
            .catch((error) => {
                console.error(error);
                return res.status(500).json({
                    code: 500,
                    message: '서버에러'
                })
            })
        })

        // 토큰 발급 처리
        router.post('/token', async(req, res) => {
            const {clientSecret} = req.body;

            try{
                // 도메인 찾아오기
                const domain = await Domain.findOne({
                    where:{clientSecret},
                    include:{
                        model:User,
                        attribute:['nick', 'id']
                    }
                });
                
                // 도메인이 등록되어 있지 않은 경우
                if(!domain){
                    return res.status(401).json({
                        code: 410 ,
                        message: "등록되지 않은 도메인 입니다."
                    })
                }

                // 등록된 도메인의 경우 토큰 생성
                const token = jwt.sign({
                    id: domain.User.id,
                    nick: domain.User.nick,
                }, process.env.JWT_SECRET,{
                    expiresIn: '1m',    // 유효시간
                    issuer : 'adam' // 발급자
                });

                return res.json({
                    code: 200,
                    message : '토큰인 발급되었습니다.',
                    token
                })

            }catch(error){
                console.log(error)
                return res.status(500).json({
                    code: 500,
                    message: "서버에러"
                })
            }
        })

        // 토큰을 확인하기 위한 처리
        router.get('/test', verifyToken, (req, res, next) => {
            res.json(req.decoded);
            
        })

        module.exports = router;

    5) App.js에 v1 Router 등록
        const v1 = require('./routes/v1.js');
        app.use('/v1', v1);

6. API 서버에서 데이터를 제공하도록 작성
    
    1) v1.js 수정

        const express = require('express');

        const dotenv = require('dotenv');
        dotenv.config();

        //서버 설정
        const app = express();
        app.set('port', process.env.PORT);

        //로그 출력을 위한 파일 과 경로를 위한 모듈 설정
        const fs = require('fs');
        const path = require('path');
        //static 파일의 경로 설정
        app.use(express.static(path.join(__dirname, 'public')));

        //view template 설정
        const nunjucks = require('nunjucks');
        app.set('view engine', 'html');
        nunjucks.configure('views', {
            express: app,
            watch: true
        });
        const morgan = require('morgan');
        const FileStreamRotator = require('file-stream-rotator');

        const logDirectory = path.join(__dirname, 'log');

        // 로그 디렉토리 생성
        fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

        // 로그 파일 옵션 설정
        const accessLogStream = FileStreamRotator.getStream({
            date_format: 'YYYYMMDD',
            filename: path.join(logDirectory, 'access-%DATE%.log'),
            frequency: 'daily',
            verbose: false
        });

        // 로그 설정
        app.use(morgan('combined', {stream: accessLogStream}));

        //출력하는 파일 압축해서 전송
        const compression = require('compression');
        app.use(compression());

        //post 방식의 파라미터 읽기
        var bodyParser = require('body-parser');
        app.use(bodyParser.json()); // to support JSON-encoded bodies
        app.use(bodyParser.urlencoded({ // to support URL-encoded bodies
            extended: true
        }));

        //쿠키 설정
        const cookieParser = require('cookie-parser');
        app.use(cookieParser(process.env.COOKIE_SECRET));

        //세션 설정
        const session = require("express-session");
        var options = {
            host: process.env.HOST,
            port: process.env.MYSQLPORT,
            user: process.env.USERID,
            password: process.env.PASSWORD,
            database: process.env.DATABASE
        };

        const MySQLStore = require('express-mysql-session')(session);

        app.use(
            session({secret: process.env.COOKIE_SECRET, resave: false, saveUninitialized: true, store: new MySQLStore(options)})
        );
        const {sequelize} = require('./models');

        sequelize
            .sync({force: false})
            .then(() => {
                console.log('데이터베이스 연결 성공');
            })
            .catch((err) => {
                console.error(err);
            });

        const passport = require('passport');
        const passportConfig = require('./passport');
        passportConfig();
        app.use(passport.initialize());
        app.use(passport.session());

        //라우터 설정
        const indexRouter = require('./routes'); // index.js는 생략 가능
        app.use('/', indexRouter);

        const authRouter = require('./routes/auth');
        app.use('/auth', authRouter);

        const v1 = require('./routes/v1.js');
        app.use('/v1', v1);

        app.use('/img', express.static(path.join(__dirname, 'uploads')));
        //에러가 발생한 경우 처리
        app.use((req, res, next) => {
            const err = new Error(`${req.method} ${req.url} 라우터가 없습니다.`);
            err.status = 404;
            next(err);
        });

        //에러가 발생한 경우 처리, req, res 앞에 err가 있다면 error를 처리하는 구문이다.
        app.use((err, req, res, next) => {
            res.locals.message = err.message;
            res.locals.error = process.env.NODE_ENV !== 'production'
                ? err
                : {};
            res.status(err.status || 500);
            res.render('error');
        });

        app.listen(app.get('port'), () => {
            console.log(app.get('port'), '번 포트에서 대기 중');
        });

7. Client Application 제작(NodePrac9-Client)
    
    1) Node JS 초기화(npm init)후 package.json script 절 nodemon 추가(start: "nodemon App.js")

    2) 필요한 패키지 설치
        npm install express dotenv axios cookie-parser express-session morgan nunjucks
        npm install --save-dev nodemon

        => axios : JS에서 ajax나 fetch api 대신에 사용할 수 있는 JS 웹 요청 처리 라이브러리

    3) App.js 파일을 생성하고 작성.
        const express = require('express');
        const morgan = require('morgan');
        const cookieParser = require('cookie-parser');
        const session = require('express-session');
        const nunjucks = require('nunjucks');
        const dotenv = require('dotenv');

        dotenv.config();
        //const indexRouter = require('./routes');

        const app = express();
        app.set('port', process.env.PORT || 4000);
        app.set('view engine', 'html');
        nunjucks.configure('views', {
            express: app,
            watch: true
        });

        app.use(morgan('dev'));
        app.use(cookieParser(process.env.COOKIE_SECRET));
        app.use(session({
            resave: false,
            saveUninitialized: false,
            secret: process.env.COOKIE_SECRET,
            cookie: {
                httpOnly: true,
                secure: false
            }
        }));

        //app.use('/', indexRouter);

        app.use((req, res, next) => {
            const error = new Error(`${req.method} ${req.url} 라우터가 없습니다.`);
            error.status = 404;
            next(error);
        });
        app.use((err, req, res, next) => {
            res.locals.message = err.message;
            res.locals.error = process.env.NODE_ENV !== 'production'
                ? err
                : {};
            res.status(err.status || 500);
            res.render('error');
        });

        app.listen(app.get('port'), () => {
            console.log(app.get('port'), '번 포트에서 대기중');
        });

    4) /veiws 디렉토리 생성 후 에러 발생시 출력될 하면인 /views/error.html 생성
        <h1>{{message}}</h1>
        <h2>{{error.status}}</h2>
        <pre>{{error.stack}}</pre>

    5) .env 파일 설정하는데 NodePrac9 에서 http://localhost:4000 번으로 Key를 발급해두고 추가한다.
        COOKIE_SECRET = NodeClient
        CLIENT_SECRET = 2a1749d9-9b7f-4da0-ac45-b46a9aca3975
    
    6) 라우팅 처리할 /routes 디렉토리에 /routes/index.js 생성후 발급 테스트 코드 작성(localhost:4000/test)후 확인한 다음에 실제 토큰 발급 처리후 App.js에 index.js router 주석 해제
       그 다음 localhost:4000/my/post에서 확인
        
        const express = require('express');
        const axios = require('axios');

        const router = express.Router();

        // 매번 동일한 요청을 위한 URL을 상수로 설정
        const URL = "http://localhost:8000/v1";

        // AJAX 요청을 할 때 누가 요청했는지 확인해주기 위해서 origin header를 추가한다.
        axios.defaults.headers.origin = 'http://localhost:4000';

        // token 발급 동작 TEST
        router.get('/test', async(req, res, next) => {
            try{
                if(!req.session.jwt){
                    const tokenResult = await axios.post("http://localhost:8000/v1/token", {
                        clientSecret : process.env.CLIENT_SECRET
                    });

                    if(tokenResult.data && tokenResult.data.code == 200){
                        // 토큰 발급 성공
                        req.session.jwt = tokenResult.data.token;
                    }else{
                        // 토큰 발급 실패
                        return res.json(tokenResult.data)
                    }
                }
                // 토큰 내용확인
                const result = await axios.get('http://localhost:8000/v1/test', {
                    headers: {authorization:req.session.jwt}
                })
                return res.json(result.data);

            }catch(error){
                console.error(error);
                return next(error);
            }
        });

        // 토큰 발급 코드
        const request = async(req, api) => {
            try{
                if(!req.session.jwt){
                    const tokenResult = await axios.post(`${URL}/token`, {
                        clientSecret : process.env.CLIENT_SECRET
                    });
                    req.session.jwt = tokenResult.data.token;
                }
                // 토큰 내용확인
                const result = await axios.get(`${URL}/${api}`, {
                    headers: {authorization:req.session.jwt}
                })
                return result;

            }catch(error){
                // 토큰 유효기간이 만료되면
                if(error.response.status === 419){
                    // 기존 토큰 삭제
                    delete req.session.jwt;
                    // 다시 토큰을 생성해달라고 요청
                    return request(req, api);
                }
                return error.response;
            }
        }

        router.get('/my/post', async(req, res, next) => {
            try{
                // NodePrac9의 /routes/v1.js에서 설정한 주소와 동일한 주소로 요청
                const result = await request(req, '/posts/my');
                res.json(result.data);
            }catch(error){
                console.error(error);
                return next(error)
            }
        })

        module.exports = router;
    
        => 값 확인 할 때 안넘어오면 NodePrac8에서 현재 아이디로 게시글 작성하기

8. 서버(NodePrac9) 수정 --> 버전 2를 생성하는 것.(기존서비스를 지키기 위해, 그래서 v2를 만들 것.)

    1) 사용량 제한
        => API Server를 만들었을 때 데이터를 무제한 제공하게 되면 트래픽이 많이 발생해서 속도가 느려질 수 있다.
        => Ddos공격의 대상이 될 때 매우 취약하다.
        => 이 때문에 일정한 주기를 가지고 제한을 하기도 하고 사이즈나 횟수 제한을 가하기도 합니다.
        => Kakao 같은 경우 사이즈, 횟수 제한을 동시에 한다.

    2) 기존 서버를 수정했을 때 처리
        => 기존코드를 무조건 바꾸는 것은 위험
        => 기존 코드(이전 버전)는 그대로 두고 deprecated나 서비스 중지 메시지를 전송하는 형태로 새로운 내용을 적용하는 것이 좋다.

    3) Node의 middleware의 개념과 Java의 Filter, Spring의 Interceptor 와 AOP
        => 실제 처리를 하기전에 후에 동작하는 로직을 작성하는 용도로 사용한다.
        => 위의 것들을 사용하는 경우는 Business Logic과 Common Concern의 분리를 하기 위해서 공통된 처리를 해야하는 경우다.
            -> Ex> 매번 어떤 비지니스 로직에서 로그인 여부를 묻게 된다면 이 로그인 여부를 묻는 것을 분리해 낸다.
            -> Ex> 또한 사용량 제한 같은 경우도 트래픽 발생감소를 위한 것인데, 이는 매번 API에 요청을 할 때 마다 사용량 제한을 확인하는 것을 따로 분리해 내는 예시가 있다.
        
        => 참고로 Spring은 전체가 Proxy 패턴이다.

    4) 사용량 제한을 위한 NodePrac9 수정
        => 사용량 제한을 위한 패키지 설치
            -> npm install express-rate-limit

        => /routes/middlewares.js 에 사용량 제한을 위한 middleware 추가
            // 사용량 제한을 위한 미들웨어
            const RateLimit = require('express-rate-limit');
            exports.apiLimiter = RateLimit({
                // 1분안에 10번 초과 불가능하고 딜레이는 없게 설정
                windowMs : 60 * 1000, // 1분
                max : 10,
                delayMs : 0,
                hadler(req, res){
                    res.status(this.statusCode).json({
                    code: this.statusCode,
                    message: '1분 단위로 요청을 해야 합니다.'
                    });
                } 
            });

            // 구버전 API(v1.js 를 통한 요청) 시 동작할 미들웨어
            exports.deprecated = (req, res) => {
                res.status(410).json({
                    code: 410,
                    message: '새로운 버전이 나왔습니다, 새버전을 이용해주세요.'
                })
            }

    5) /routes/v1.js 의 새로운 버전인 /routes/v2.js를 기존의 코드를 가져와서 새롭게 생성한뒤 사용량 제한 추가.
        => const { verifyToken, apiLimiter } = require('./middlewares'); 과 모든 토큰 발급 요청에서 apiLimiter 미들웨어를 추가하면 된다.

        const express = require('express');
        const { verifyToken, apiLimiter } = require('./middlewares');

        const jwt = require('jsonwebtoken'); // json token 라이브러리
        const {Domain, User, Post, Hashtag} = require('../models')// model 들 불러오기

        const router = express.Router();

        // 데이터를 반환하는 요청을 처리
        router.get('/posts/my', apiLimiter, verifyToken, (req, res, next) => {
            Post.findAll({where:{userId:req.decoded.id}})
            .then((posts) => {
                console.log(posts);
                res.json({code:200, payload: posts}); // -> 렌더링 하지 않고 json 문자열로 파싱해서 데이터를 넘겨주면 API Server
            })
            .catch((error) => {
                console.error(error);
                return res.status(500).json({
                    code: 500,
                    message: '서버에러'
                })
            })
        })

        // 토큰 발급 처리
        router.post('/token', async(req, res) => {
            const {clientSecret} = req.body;

            try{
                // 도메인 찾아오기
                const domain = await Domain.findOne({
                    where:{clientSecret},
                    include:{
                        model:User,
                        attribute:['nick', 'id']
                    }
                });
                
                // 도메인이 등록되어 있지 않은 경우
                if(!domain){
                    return res.status(401).json({
                        code: 410 ,
                        message: "등록되지 않은 도메인 입니다."
                    })
                }

                // 등록된 도메인의 경우 토큰 생성
                const token = jwt.sign({
                    id: domain.User.id,
                    nick: domain.User.nick,
                }, process.env.JWT_SECRET,{
                    expiresIn: '1m',    // 유효시간
                    issuer : 'adam' // 발급자
                });

                return res.json({
                    code: 200,
                    message : '토큰인 발급되었습니다.',
                    token
                })

            }catch(error){
                console.log(error)
                return res.status(500).json({
                    code: 500,
                    message: "서버에러"
                })
            }
        })

        // 토큰을 확인하기 위한 처리
        router.get('/test', apiLimiter, verifyToken, (req, res, next) => {
            res.json(req.decoded);
            
        })

        module.exports = router;

    6) /routes/v1.js 인 기존 버전의 모든 요청을 막기 위해서 v1.js 에 모든 라우팅 처리에 deprecated 적용 추가하고 localhost:4000/test나 my/post 로 접속후 확인
        app.use(deprecated);

    7) App.js 에서 구버전 API v1.js로 가는 요청을 새 버전 v2.js로 돌린다.
        // 구 버전 API v1.js
        /* const v1 = require('./routes/v1.js');
        app.use('/v1', v1); */

        const v2 = require('./routes/v1.js');
        app.use('/v1', v2);

    8) NodePrac9-Client(Client)의 /routes/index.js에서 기존 버전으로의 요청을 새 버전 v2.js로 돌린다.
        // 매번 동일한 요청을 위한 URL을 상수로 설정
        // 구버전 v1으로의 요청 차단
        /* const URL = "http://localhost:8000/v1"; */

        // 매번 동일한 요청을 위한 URL을 상수로 설정
        // 새버전 v2로 요청 돌리기
        const URL = "http://localhost:8000/v2";

    9) CORS(Cross-Origin Resource Sharing)

    => SOP(Same Origin Policy = 동일 출처 정책)
        -> 어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용 하는 것을 제한하는 브라우저의 보안 방식.

        -> 브라우저에서는 XMLhttpRequest(ajax) 와 Fetch API 같은 경우는 다른 출처에 리소스를 요청할 때 적용한다.

        -> img, link, script, video, audio, object, embed, applet 태그는 SOP를 적용 받지 않는다.

        -> 그래서 나온 것이 CORS(교차 출처 정책)
        -> 추가 HTTP 헤더를 사용해서 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 자원에 접근할 수 있는 권한을 부여해서 브라우저에 알려주는 것.

        -> ajax 나 fetch api 가 다른 출처의 데이터를 가져와서 사용하기 위해서는 올바른 CORS 헤더를 포함한 응답을 반환해야 한다.

        -> 서버를 만들 때 위의 부분을 고려해서 작성해야 하고 이미 만들어진 경우나 다른 곳에서 만든 API를 이용해야 하는 경우에는 Client 에서 Proxy를 이용해야 한다.

    10) ajax 오류
        => 클라이언트 프로젝트의 routes 디렉토리의 index.js 파일에 라우팅 코드 추가
            router.get('/', (req, res) => {
                res.redirect('main', {key : process.env.CLIENT_SECRET})
            })

        => views/main.html 생성 후 localhost:4000 으로 접속해서 Cors에러 확인
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>
        </head>
        <body>
            <div id="result"></div>
            <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
            <script>
                axios.get('http://localhost:8000/v2/token', {
                    clientSecret:'{{key}}'
                })
                .then(res => {
                    document.getElementById('result').innerHTML = JSON.stringify(res.data);
                })
                .catch(error => {
                    console.log(error)
                })
            </script>
        </body>
        </html>

    11) 앞에서 확인한 CORS 에러에 대한 설정 추가
        => NodePrac9에서 cors 구현 패키지를 설치
            -> npm install cors

        => NodePrac9 의 routes/v2.js 에서 cors 처리 추가
            const cors = require('cors');

            // 무조건적으로 CORS를 허용
            router.use(cors({
                credentials: true
            }))

            // Domain에 등록된 경우만 전송할 수 있도록 설정하는 것.
            router.use(async (req, res, next) => {
                // 현재 요청 도메인이 데이터베이스에 등록된 도메인인지 찾아오기
                const domain = await Domain.findOne({
                    where:{host:url.parse(req.get('origin')).host}
                })
                if(domain){
                    cors({
                        origin: req.get('origin'),
                        credentials: true
                    })(req, res, next);
                }else{
                    next();
                }
            })

9. 기타
    1) node에서 다른 서버의 데이터를 가져오는 모듈로 request 모듈을 주로 사용한다, (PPT 참고)

    2) websocket
        => 클라이언트와 서버의 연결을 유지한 상태로 데이터를 주고 받을 수 있는 HTML5 spec
        => http 나 https 는 연결을 유지하지 않고 header의 오버헤드가 큰 편이다.
        => 짧은 메시지를 자주 전송하는 시스템에서 적합하지 않은 프로토콜이다.

    3) push - Server Sent Events
        => 클라이언트의 요청이 없어도 서버가 메시지를 전송하는 것
        => 마지막 예제는 물건을 등록하고 1초마다 시간이 경과한 것을 서버가 클라이언트에게 전송을 하고 상품을 등록한지 하루가 지나면 낙찰을 해서 최고가를 입력한 유저에게 등록하는 프로젝트.