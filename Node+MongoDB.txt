[NodePrac7]
1. Node + MongoDB
    1) Mongo DB 연결
        -> 드라이버 페키지 이름
            mongodb
        
        -> 연결 코드
            let MongoClient = require('mongodb').MongoClient
            MongoClient.connect('mongodb://아이디:비밀번호@ip:포트번호', (err, database) =>{
                if(err){
                    // 에러 발생했을 때 처리
                }else{
                    // 정상 작동했을 때 처리
                    let db = database.db('데이터베이스 이름');
                    // db를 가지고 작업 수행
                }
            });

        -> 샘플 데이터 삽입
            use item
            db.item.insert({'itemid':1, 'itemname':'레몬', 'price':500, 'description':'비타민 C가 풍부한쓴 귤', 'pictureurl':'lemon.jpg'})
            db.item.insert({'itemid':2, 'itemname':'오렌지', 'price':1500, 'description':'비타민 C가 풍부한 당귤', 'pictureurl':'orange.jpg'})
            db.item.insert({'itemid':3, 'itemname':'키위', 'price':2000, 'description':'비타민 C가풍부한 다래', 'pictureurl':'kiwi.jpg'})
            db.item.insert({'itemid':4, 'itemname':'포도', 'price':1000, 'description':'항산화 성분과 당분이 높고 무기물이 많은 과일', 'pictureurl':'grape.jpg'})
            db.item.insert({'itemid':5, 'itemname':'딸기', 'price':2000, 'description':'수분 함량이 높은 과일', 'pictureurl':'strawberry.jpg'})
            db.item.insert({'itemid':6, 'itemname':'무화과', 'price':300, 'description':'칼슘, 섬유질 및 항산화 물질을 많이 함유한 식물', 'pictureurl':'fig.jpg'})

    2) Node 프로젝트 생성 & npm init
        => Entry Point 는 App.js

        => 패키지 설치
           npm install express morgan multer mongodb ejs
           npm install --save-dev nodemon

        => Package.json 파일에서 Entry Point App.js로 변경
            "Scripts" : { 
                ...
                "start" : "nodemon App.js" 
                ...
            }

        => 필요한 디렉토리 생성
            img, views

    3) App.js 파일에 application server 기본틀과 mongodb 연결
        -> 라이브러리 가져올 때 참고 사항
            // mongodb의 index.js파일에서 내보낸 것을 mongodb로 사용한다는 의미
            let MongoClient = require('mongodb').MongoClient;

            // mongodb의 index.js 파일에서 내보낸 것 중 MongoClient인 것만 받아서 MongoClient 로 사용한다는 의미
            let {MongoClient} = require('mongodb').MongoClient;

    4) App.js 파일에 client 에서 item/all 경로의 get 요청으로 node DB의 item Collection의 모든 데이터를 받아오는 코드 
        // node DB의 item 컬렉션에 존재하는 모든 데이터를 반환한다.
        app.get('/item/all', (req, res) => {
            // 데이터 베이스 연결
            MongoClient.connect(databaseUrl, {useNewUrlParser:true}, (error, database) => {
                if(error){
                    console.log(error);

                    // 절대로 client 입자에서는 튕겨버리지 않고 그냥 에러나 실패를 출력하는 편이 나음
                    // 404 에러이면 "죄송합니다, 요청하신 페이지를 찾을 수 없습니다." 라고 출력하는 것이 낫다.
                    res.json({"result":false, "message":"이유"});
                } else {
                    // 데이터 베이스 가져오기
                    // database.db('사용할 DB이름')
                    let db = database.db('node')

                    // item 컬렉션의 모든 데이터 가져오기
                    db.collection('item').find().sort({itemid:-1}).toArray((err, items) => {
                        if(err){
                            console.log(error);
                            res.json({"result":false, "message":"이유"});
                        }else{
                            res.json({"result":true, "list":items, "count":items.length});
                        }
                    })
                }
            })
        });

    5) App.js 파일에 client 에서 item/paging 경로의 get 요청으로 node DB의 item Collection의 데이터를 page 별로 불러오기
        // node 데이터 베이스의 item 컬렉션의 데이터를 페이지 단위로 가져오기
        // 데이터베이스에서 페이지 단위로 데이터를 가져올 때는 건너뛸 개수와 가져올 데이터 개수가 필요

        // 클라이언트에서 넘겨주는 데이터 : 페이지 번호와 데이터 개수
        app.get('/item/paging', (req, res) => {
            // 클라이언트의 데이터 받아오기
            let pageno = req.query.pageno; // 페이지 번호
            let count = req.query.count; // 한 번에 가쟈올 데이터 개수

            // 건너뛸 개수 계산
            if(pageno == undefined){
                pageno = 1;
            }
            if(count == undefined){
                count = 2;
            }

            let start = (parseInt(pageno) - 1) * parseInt(count);

            // 데이터 베이스 연결
            MongoClient.connect(databaseUrl, {useNewUrlParser:true}, (error, database) => {
                if(error){
                    console.log(error);

                    // 절대로 client 입자에서는 튕겨버리지 않고 그냥 에러나 실패를 출력하는 편이 나음
                    // 404 에러이면 "죄송합니다, 요청하신 페이지를 찾을 수 없습니다." 라고 출력하는 것이 낫다.
                    res.json({"result":false, "message":"이유"});
                } else {
                    // 데이터 베이스 가져오기
                    // database.db('사용할 DB이름')
                    let db = database.db('node')

                    // item 컬렉션의 모든 데이터 가져오기
                    db.collection("item").find().sort({itemid:-1}).skip(start).limit(parseInt(count)).toArray((error, items) => {
                        if(error){
                            console.log(error);
                            res.json({"result":false, "message":"이유"});
                        }else{
                            res.json({"result":true, "list":items, "count":items.length});
                        }
                    })
                }
            })
        });
        -> localhost:9000/item/paging -> 파라미터 없이 확인
        -> localhost:9000/item/paging?pageno=2&count=2 -> 파라미터 주고 확인

    6) App.js 파일에 client 에서 item/detail 경로의 get 요청으로 node DB의 item Collection의 데이터 하나의 정보 모두 가져오기
    // 상세보기
    // 기본키 하나의 데이터를 필요로 하는 경우가 많고
    // 결과는 하나의 데이러를 반환하는 경우도 많으며 그 이외의 주위의 3~10개 정도의 같이 반환하는 경우가 많다.
    // 예시로 게시글 같은 경우 하나의 게시글을 읽을 때, 사용자는 다음 게시글, 이전 게시글 혹은 해당 게시글의 가까운 게시글을 읽을 가능성이 높다.
    app.get('/item/:itemid', (req, res) => {
        // 클라이언트의 데이터 받아오기
        // 페이지 번호와 같아 ?변수=값 으로 올 때는 query로 받고 :속성 경로로 값이 오면 params로 post방식으로 값이 넘어오면 body로 받는다.
        let itemid = req.params.itemid

        // 데이터 베이스 연결
        MongoClient.connect(databaseUrl, {useNewUrlParser:true}, (error, database) => {
            if(error){
                console.log(error);

                // 절대로 client 입자에서는 튕겨버리지 않고 그냥 에러나 실패를 출력하는 편이 나음
                // 404 에러이면 "죄송합니다, 요청하신 페이지를 찾을 수 없습니다." 라고 출력하는 것이 낫다.
                res.json({"result":false, "message":"이유"});
            } else {
                // 데이터 베이스 가져오기
                // database.db('사용할 DB이름')
                let db = database.db('node')

                // item 컬렉션의 모든 데이터 가져오기
                db.collection("item").findOne({"itemid":Number(itemid)}, (error, item) => {
                    if(error){
                        console.log(error);
                        res.json({"result":false, "message":"이유"});
                    }else{
                        res.json({"result":true, "item":item});
                    }
                });
            }
        });
    });

    7) App.js 파일에 client 에서 item/insert 경로의 POST 요청으로 node DB의 item Collection의 데이터 하나의 새로운 정보 삽입하기

    8) 수정하기(구현 X)
        .update({속성이름:값}, {$set:{속성이름 : 수정할 값,...}}, (error, result) => {})
        .update({"itemid:값}, {$set:{"itemname" : 수정할 값,...}}, (error, result) => {})

    9) 삭제하기(구현 X)
        .deleteOne({"속성이름":값}, (error, result) => {})
        
    => 주의 할 점은 MongoDB는 숫자와 문자열을 명확하게 구분

2. Node + MongoDB + mongoose(Node의 ODM)
    
    1) RDBMS와 NoSQL의 차이
        => RDBMS는 스키마를 생성하고 데이터를 저장하는 형식을 취하지만 NoSQL은 스키마를 생성하지 않고 데이터를 저장하는 것이 가능하다.
        => NoSQL은 스키마의 구조가 변경이 되도 데이터 구조를 변경할 필요없이 데이터 저장이 가능하다.
            -> 저장은 가능하나, 실제로 DB를 사용하는 사람이 사용하는데 데이터가 뭔지 알 수 가 없기 때문에 결국 어느정도 구조를 맞춰서 사용한다.

        => RDBMS는 데이터의 값으로 다른 테이블의 데이터나 배열을 삽입할 수 없기 때문에 테이블을 분할 하고 Foreign Key나 JOIN 의 개념을 이용해서 여러종류의 데이터를 저장하지만 NoSQL들은 데이터의 값으로 객체나 배열이 가능하기 때문에 하나의 Collection 에 여러 종류 데이터를 저장할 수 있어 JOIN의 개념이 없어도 되기 때문에 처리속도가 빠를 수 있다.
        => JOIN 대신에 Embedding이나 Linking의 개념을 사용한다.
        
        => RDBMS는 일반적으로 엄격한 트랜잭션을 적용하지만 NoSQL들은 느슨한 트랜잭션을 적용한다.
            -> 트랜잭션이 엄격한 작업(거래)에는 NoSQL은 잘 사용하지 않지만 검색엔진이나 채팅과 같은 속도가 중요한 것에 주로 사용된다.
        
        => NoSQL은 복잡한 거래가 없는 경우나 비정형 데이터만을 저장하기 위한 용도로 많이 사용

    2) ODM
        => Relation 이라는 개념 대신에 Document를 하나의 객체에 매핑하는 방식이다.
        => 하나의 Document에 대한 모양을 만들고 사용해야 하기 때문에 NoSQL의 Collection도 하나의 정형화 된 모양을 가져야 한다.
        => MongoDB 에서 ODM을 사용할 수 있도록 해주는 대표적인 라이브러리가 Mongoose 다.

        P.S. 프로그래밍 언어가 데이터베이스와 연동하는 방식
            
            => 드라이버의 기능만을 이용해서 사용하는 방식

            => SQL Mapper : 관계형 데이터 베이스에만 존재하는 방식으로 SQL과 프로그래밍 언어 코드의 분리를 이용하는 방식

            => ORM이나 ODM 같은 객체 지향 문법을 이용해서 사용할 수 도록 해주는 방식.
            
        