[NodePrac7]
1. Node + MongoDB
    1) Mongo DB 연결
        -> 드라이버 페키지 이름
            mongodb
        
        -> 연결 코드
            let MongoClient = require('mongodb').MongoClient
            MongoClient.connect('mongodb://아이디:비밀번호@ip:포트번호', (err, database) =>{
                if(err){
                    // 에러 발생했을 때 처리
                }else{
                    // 정상 작동했을 때 처리
                    let db = database.db('데이터베이스 이름');
                    // db를 가지고 작업 수행
                }
            });

        -> 샘플 데이터 삽입
            use item
            db.item.insert({'itemid':1, 'itemname':'레몬', 'price':500, 'description':'비타민 C가 풍부한쓴 귤', 'pictureurl':'lemon.jpg'})
            db.item.insert({'itemid':2, 'itemname':'오렌지', 'price':1500, 'description':'비타민 C가 풍부한 당귤', 'pictureurl':'orange.jpg'})
            db.item.insert({'itemid':3, 'itemname':'키위', 'price':2000, 'description':'비타민 C가풍부한 다래', 'pictureurl':'kiwi.jpg'})
            db.item.insert({'itemid':4, 'itemname':'포도', 'price':1000, 'description':'항산화 성분과 당분이 높고 무기물이 많은 과일', 'pictureurl':'grape.jpg'})
            db.item.insert({'itemid':5, 'itemname':'딸기', 'price':2000, 'description':'수분 함량이 높은 과일', 'pictureurl':'strawberry.jpg'})
            db.item.insert({'itemid':6, 'itemname':'무화과', 'price':300, 'description':'칼슘, 섬유질 및 항산화 물질을 많이 함유한 식물', 'pictureurl':'fig.jpg'})

    2) Node 프로젝트 생성 & npm init
        => Entry Point 는 App.js

        => 패키지 설치
           npm install express morgan multer mongodb ejs
           npm install --save-dev nodemon

        => Package.json 파일에서 Entry Point App.js로 변경
            "Scripts" : { 
                ...
                "start" : "nodemon App.js" 
                ...
            }

        => 필요한 디렉토리 생성
            img, views

    3) App.js 파일에 application server 기본틀과 mongodb 연결
        -> 라이브러리 가져올 때 참고 사항
            // mongodb의 index.js파일에서 내보낸 것을 mongodb로 사용한다는 의미
            let MongoClient = require('mongodb').MongoClient;

            // mongodb의 index.js 파일에서 내보낸 것 중 MongoClient인 것만 받아서 MongoClient 로 사용한다는 의미
            let {MongoClient} = require('mongodb').MongoClient;

    4) App.js 파일에 client 에서 item/all 경로의 get 요청으로 node DB의 item Collection의 모든 데이터를 받아오는 코드 
        // node DB의 item 컬렉션에 존재하는 모든 데이터를 반환한다.
        app.get('/item/all', (req, res) => {
            // 데이터 베이스 연결
            MongoClient.connect(databaseUrl, {useNewUrlParser:true}, (error, database) => {
                if(error){
                    console.log(error);

                    // 절대로 client 입자에서는 튕겨버리지 않고 그냥 에러나 실패를 출력하는 편이 나음
                    // 404 에러이면 "죄송합니다, 요청하신 페이지를 찾을 수 없습니다." 라고 출력하는 것이 낫다.
                    res.json({"result":false, "message":"이유"});
                } else {
                    // 데이터 베이스 가져오기
                    // database.db('사용할 DB이름')
                    let db = database.db('node')

                    // item 컬렉션의 모든 데이터 가져오기
                    db.collection('item').find().sort({itemid:-1}).toArray((err, items) => {
                        if(err){
                            console.log(error);
                            res.json({"result":false, "message":"이유"});
                        }else{
                            res.json({"result":true, "list":items, "count":items.length});
                        }
                    })
                    res.json({"result":true})
                }
            })
        });



2. Node + MongoDB + mongoose(Node의 ODM)