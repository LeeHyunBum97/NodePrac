[DB 사용]
    - 로컬 DB
        임시저장
    
    - 외부 DB 
        서버

    - SQL Lite나 Access 는 로컬에 설치해서 사용하며, DB를 빠르게 또는 Offline 상태에서 사용하기 위한 목적
    
    - 그 외의 DB는 대부분의 경우 외부에 설치해서 애플리케이션 서버를 통해서 사용하거나 직접사용(DBA나 Operator)한다.

    - Docker 는 회원가입 하고 설치

    - Windows 에서 Docker를 사용하기 위해서는 리눅스 커널을 설치해야한다. 

    - Root 계정 즉, 관리자 계정은 외부에서 사용하도록 하면 절대 안된다.

    - 포트폴리오나 실제 프로젝트 할 때는 DB 마지막에는 파일을 항상 git에 올리고 DB를 백업해 두어야 한다, 통상적으로 백업의 단위는 DB 하나가 된다.


[Maria DB]

1. 개요

    => SQL에 기반을 둔 RDBMS(관계형 데이터베이스로)로 Open Source 형태로 제공
    => MySQL 개발자가 만들어서 MySQL과 거의 유사 
    => SQL 도 거의 차이가 없음

    => DB > Table
    => 하나의 DB는 여러 사용자가 공유
 
2. 설치

    1) OS에 직접 설치
        
        => windows
            https://www.mariadb.org/download
        
        => Mac
            brew install mariadb 이나 패키지 관리자를 이용해서 설치
    
    2) 가상화 컨테이너 설치
        => docker와 같은 가상화 컨테이너에 설치
        => windows에서는 WSL2 설치가 필요하다, 이후 재시작해야 정상적으로 활동할 수 있다.
           (wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)

        => Maria DB image(설치까지 되어 있는 환경) 다운로드
           - docker pull mariadb versiton (생략시 마리아 DB)
        
        => Maria DB 실행
            - docker run --name mariadb -d -p 외부에서 접속할 포트번호:MariaDB 포트 번호 -e MYSQL_ROOR_PASSWORD=루트비밀번호 컨테이너 이름
            -> docker run --name mariadb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=8236 mariadb
            -> 마지막 컨테이너 이름은 알기 쉽게 쓰고자 하는 이미지 파일과 동일하게

        => 실행확인
            - docker ps

        => 모든 컨테이너 확인
            - docker -ps -a
        
        => 컨테이너 중지
            - docker stop 컨테이너이름

        => 컨테이너 시작
            - docker start 컨테이너이름

        => 컨테이너 재시작
            - docker restart 컨테이너이름

        => 컨테이너 삭제
            - docekr rm 컨테이너이름

        => 실행중인 컨테이너 삭제
            - docker rm 컨테이너이름 -f

    3) DB접속 도구 설치
        => DBeaver(Open Source 이고 여러 DB 접속 기능)설치
        => MySQL workbench와 같은 역할로 여러종류의 DB를 접속할 수 있기 때문에 사용했다.
        => 금융 분야로 취업을 생각하면 토드나 오렌지 같은 접속 도구를 사용하는 것도 나쁘지 않다.

    4) DB 서버 실행 및 접속 확인
        => DB 접속 도구에서
            Host : localhost
            PORT : 3306(설치할 때 변경시 수정됨).
            DATAMASE : mysql(기본제공).
            USERNAME : root(기본제공).
            PASSWORD : 설치할 때 사용한 비밀번호
           를 입력하고 연경을 시도한다.

    5) DB에 외부 접속 허용

        1) 권한 설정

            - GRANT all privileges on 사용할 DB 이름 TO '계정'@'접속할IP';
            
            - 모든 DB를 사용하게 하고자 하는 경우 *.*로 설정
            
            - 모든 곳에서 접속하도록 하고자 할 때는 %를 설정하고 로컬에서만 접속 하도록 할 때는 localhost로 설정한다.
            
            - 권한 설정 명령은 설정하고 적용 명령을 수행한다.
                -  FLUSH privileges;

            - Ex) root 계정을 모든 곳에서 접속하도록 설정
                - GRANT all privileges on *.* TO 'root'@'%';

        2) 서버 설정( Windows에 DB를 직접 설치 했으면 권한설정만 하면 되므로 생략.)

            => /etc/mysql/mariadb.conf.d/50-server.cnf 파일의 bind-address 부분을 허용할 IP로 변경을 해줘야 하는데 0.0.0.0 이면 모든 곳에서 접속 가능하게 된다.
            => 실제 서버 설정이라면 Application Server의 IP만 허용한다.

            => docekr는 직접 파일을 수정할 수 없기 때문에 터미널에서 컨테이너의 bash로 접속
            => docekr exec -it 컨테이너이름 bash 명령으로 접속한 후

                - apt update -> 기존에 설치된 apt 업데이트
                - apt upgrade -> apt 업데이트
                - apt install vim -> 업데이트 된 apt 패키지 다운로드(여기선 vim).

            => vim /etc/mysql/mariadb.conf.d/50-server.cnf 명령으로 수정
            => vim editor를 사용하는 이유는 자원소모 측면에서 매우 가볍기 때문에 inteliJ나 Eclipes는 무거움, VScode는 그나마 가벼운 편

            => 텍스트가 열리면 i를 눌러서 수정모드로 진입한 뒤 수정하고 ESC를 눌러 수정모드를 빠져 나온후 :wq 명령으로 저장하고 나와야 한다.
            => mariadb 재시작( docekr에서는 mariaDB 컨테이너 재시작에 해당된다.

            => bind-address 부분을 0.0.0.0으로 수정하면 모든 곳에서 해당 서버에 접속할 수 있게 된다, 실제 서버에서는 특정 IP만 하도록 설정!
            => 설정을 적용하기 위해서 docekr restart mariadb로 MariaDB 컨테이너를 재시작한다.

            => 마지막으로 windows 는 방화벽을 해제해야 외부에서 PC로 접속할 수 있다.
        
    6) SQL 작성 규칙
        => SQL의 예약어는 대소문자 구분을 하지 않는다.
        => 테이블 이름이나 컬럼 이름은 대소문자를 구분하는 DB도 있고 구분하지 않는 DB도 있다.
        
        => MariaDB나 MySQL은 구분한다.
            - 값을 작성할 때는 대소문자 구분을 하는데 MariaDB는 대소문자 구분을 하지 않는 경우도 있다.
            - 숫자 데이터는 따옴표를 하지않고 문자는 작은 따옴표를 해서 표현하는데 MariaDB나 MySQL은 큰 따옴표도 허용한다.
            - 명령문의 마지막은 ; 인데 접속도구에서는 종류에 따라 해도 되고 하지 않아도 되지만 절차적 프로그래밍을 할 때는 명확하게 해줘야 하며 프로그래밍 언어에서 SQL을 작성할 때는 ;를 사용하면 안된다.
    
    7) DB 관련 명령어
        - 데이터 베이스 생성
            - create database 데이터베이스이름; 
                # 이미 존재하는 이름이면 에러가 발생한다.
            - 일반적으로 프로젝트를 진행할 때 마다 DB를 생성한다.

        - 데이터베이스확인
            - show databases;

        - 데이터 베이스 사용
            - use 데이터베이스이름; 
            - 항상 MySQL이나 MariaDB 에서는 SQL을 사용하기 전에 DB사용 설정을 먼저해야 한다.

        - 데이터베이스 삭제
            - drop database 데이터베이스이름

        - 데이터베이스에 존재하는 테이블 확인
            - show tables;
        
        - 데이터베이스 사용
            - use adam;
        
        - 나중에 DB 관련 명령어는 충분히 테스트 해본 다음에 따로 타이핑 해 둔 뒤에 스크립트 실행 형태로 한번에 명령문을 제어한다.

    9) SQL 분류

        - DDL(구조에 관련된 명령어로 일반적으로 DBA의 명령아) -> 취소불가

            - CREATE : 구조 생성
            - ALTER : 구조변경
            - DROP : 구조삭제

            - TURNCATE : 테이블 내의 데이터 삭제
            
            - RENAME : 구조이름 변경 

        - DQL : 검색관련 명령어

            - SELECT

        - DML(데이터 관련 명령어) -> 취소가능

            - INSER
            - UPDATE
            - DELETE



