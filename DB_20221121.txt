[DB 사용]
    - 로컬 DB
        임시저장
    
    - 외부 DB 
        서버

    - SQL Lite나 Access 는 로컬에 설치해서 사용하며, DB를 빠르게 또는 Offline 상태에서 사용하기 위한 목적
    
    - 그 외의 DB는 대부분의 경우 외부에 설치해서 애플리케이션 서버를 통해서 사용하거나 직접사용(DBA나 Operator)한다.

    - Docker 는 회원가입 하고 설치

    - Windows 에서 Docker를 사용하기 위해서는 리눅스 커널을 설치해야한다. 

    - Root 계정 즉, 관리자 계정은 외부에서 사용하도록 하면 절대 안된다.

    - 포트폴리오나 실제 프로젝트 할 때는 DB 마지막에는 파일을 항상 git에 올리고 DB를 백업해 두어야 한다, 통상적으로 백업의 단위는 DB 하나가 된다.


[Maria DB]

1. 개요

    => SQL에 기반을 둔 RDBMS(관계형 데이터베이스로)로 Open Source 형태로 제공
    => MySQL 개발자가 만들어서 MySQL과 거의 유사 
    => SQL 도 거의 차이가 없음

    => DB > Table
    => 하나의 DB는 여러 사용자가 공유
 
2. 설치

    1) OS에 직접 설치
        
        => windows
            https://www.mariadb.org/download
        
        => Mac
            brew install mariadb 이나 패키지 관리자를 이용해서 설치
    
    2) 가상화 컨테이너 설치
        => docker와 같은 가상화 컨테이너에 설치
        => windows에서는 WSL2 설치가 필요하다, 이후 재시작해야 정상적으로 활동할 수 있다.
           (wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)


        => WSL2 윈도우11 에서 설치하는 방법 (https://www.youtube.com/watch?v=28Ei63qtquQ)

           - 명령어 실행기 에서 appwiz.cpl 입력 혹은 제어판에서 프로그램 -> 프로그램 및 기능으로 이동
           - windows 기능 켜기/끄기 로 이동
           - Linux용 windows 하위 시스템, 가상머신 플랫폼 체크 후 자동 재부팅
           - 마이크로스프 앱스토어에서 우분투 설치 (LTS추천) <파워쉘에서 설치가능>
           - 파워쉘에서 wsl --update 입력
           - wsl --status 명령어로 현재 실행중인 wsl 확인.(버전 2)

        => Maria DB image(설치까지 되어 있는 환경) 다운로드
           - docker pull mariadb version (생략시 마리아 DB)
        
        => Maria DB 실행
            - docker run --name mariadb -d -p 외부에서 접속할 포트번호:MariaDB 포트 번호 -e MYSQL_ROOR_PASSWORD=루트비밀번호 컨테이너 이름
            -> docker run --name mariadb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=8236 mariadb
            -> 마지막 컨테이너 이름은 알기 쉽게 쓰고자 하는 이미지 파일과 동일하게

        => 실행확인
            - docker ps

        => 모든 컨테이너 확인
            - docker -ps -a
        
        => 컨테이너 중지
            - docker stop 컨테이너이름

        => 컨테이너 시작
            - docker start 컨테이너이름

        => 컨테이너 재시작
            - docker restart 컨테이너이름

        => 컨테이너 삭제
            - docekr rm 컨테이너이름

        => 실행중인 컨테이너 삭제
            - docker rm 컨테이너이름 -f

3. DB접속 도구 설치
    => DBeaver(Open Source 이고 여러 DB 접속 기능)설치
    => MySQL workbench와 같은 역할로 여러종류의 DB를 접속할 수 있기 때문에 사용했다.
    => 금융 분야로 취업을 생각하면 토드나 오렌지 같은 접속 도구를 사용하는 것도 나쁘지 않다.

4.DB 서버 실행 및 접속 확인
    => DB 접속 도구에서
        Host : localhost
        PORT : 3306(설치할 때 변경시 수정됨).
        DATAMASE : mysql(기본제공).
        USERNAME : root(기본제공).
        PASSWORD : 설치할 때 사용한 비밀번호
        를 입력하고 연결을 시도한다.

5. DB에 외부 접속 허용

    1) 권한 설정

        - GRANT all privileges on 사용할 DB 이름 TO '계정'@'접속할IP';
            
        - 모든 DB를 사용하게 하고자 하는 경우 *.*로 설정
            
        - 모든 곳에서 접속하도록 하고자 할 때는 %를 설정하고 로컬에서만 접속 하도록 할 때는 localhost로 설정한다.
            
        - 권한 설정 명령은 설정하고 적용 명령을 수행한다.
            -  FLUSH privileges;

        - Ex) root 계정을 모든 곳에서 접속하도록 설정
            - GRANT all privileges on *.* TO 'root'@'%';

    2) 서버 설정( Windows에 DB를 직접 설치 했으면 권한설정만 하면 되므로 생략.)

        => /etc/mysql/mariadb.conf.d/50-server.cnf 파일의 bind-address 부분을 허용할 IP로 변경을 해줘야 하는데 0.0.0.0 이면 모든 곳에서 접속 가능하게 된다.
        => 실제 서버 설정이라면 Application Server의 IP만 허용한다.

        => docekr는 직접 파일을 수정할 수 없기 때문에 터미널에서 컨테이너의 bash로 접속
        => docekr exec -it 컨테이너이름 bash 명령으로 접속한 후

            - apt update -> 기존에 설치된 apt 업데이트
            - apt upgrade -> apt 업데이트
            - apt install vim -> 업데이트 된 apt 패키지 다운로드(여기선 vim).

        => vim /etc/mysql/mariadb.conf.d/50-server.cnf 명령으로 수정
        => vim editor를 사용하는 이유는 자원소모 측면에서 매우 가볍기 때문에 inteliJ나 Eclipes는 무거움, VScode는 그나마 가벼운 편

        => 텍스트가 열리면 i를 눌러서 수정모드로 진입한 뒤 수정하고 ESC를 눌러 수정모드를 빠져 나온후 :wq 명령으로 저장하고 나와야 한다.
        => mariadb 재시작( docekr에서는 mariaDB 컨테이너 재시작에 해당된다.

        => bind-address 부분을 0.0.0.0으로 수정하면 모든 곳에서 해당 서버에 접속할 수 있게 된다, 실제 서버에서는 특정 IP만 하도록 설정!
        => exit 명령으로 exec 명령어 탈출
        => 설정을 적용하기 위해서 docekr restart mariadb로 MariaDB 컨테이너를 재시작한다.

        => 마지막으로 windows 는 방화벽을 해제해야 외부에서 PC로 접속할 수 있다.
        
6. SQL 작성 규칙
    => SQL의 예약어는 대소문자 구분을 하지 않는다.
    => 테이블 이름이나 컬럼 이름은 대소문자를 구분하는 DB도 있고 구분하지 않는 DB도 있다.
        
    => MariaDB나 MySQL은 구분한다.
        - 값을 작성할 때는 대소문자 구분을 하는데 MariaDB는 대소문자 구분을 하지 않는 경우도 있다.
        - 숫자 데이터는 따옴표를 하지않고 문자는 작은 따옴표를 해서 표현하는데 MariaDB나 MySQL은 큰 따옴표도 허용한다.
        - 명령문의 마지막은 ; 인데 접속도구에서는 종류에 따라 해도 되고 하지 않아도 되지만 절차적 프로그래밍을 할 때는 명확하게 해줘야 하며 프로그래밍 언어에서 SQL을 작성할 때는 ;를 사용하면 안된다.
    
7. DB 관련 명령어
    - 데이터 베이스 생성
        - create database 데이터베이스이름; 
            # 이미 존재하는 이름이면 에러가 발생한다.
        
        - 일반적으로 프로젝트를 진행할 때 마다 DB를 생성한다.

    - 데이터베이스확인
        - show databases;

    - 데이터 베이스 사용
        - use 데이터베이스이름; 
        - 항상 MySQL이나 MariaDB 에서는 SQL을 사용하기 전에 DB사용 설정을 먼저해야 한다.

    - 데이터베이스 삭제
        - drop database 데이터베이스이름

    - 데이터베이스에 존재하는 테이블 확인
        - show tables;
        
    - 데이터베이스 사용
        - use adam;
        
    - 나중에 DB 관련 명령어는 충분히 테스트 해본 다음에 따로 타이핑 해 둔 뒤에 스크립트 실행 형태로 한번에 명령문을 제어한다.

9. SQL 분류

    - DDL(구조에 관련된 명령어로 일반적으로 DBA의 명령아) -> 취소불가

        - CREATE : 구조 생성
        - ALTER : 구조변경
        - DROP : 구조삭제

        - TURNCATE : 테이블 내의 데이터 삭제
            
        - RENAME : 구조이름 변경 

    - DQL : 검색관련 명령어

        - SELECT

    - DML(데이터 관련 명령어) -> 취소가능

        - INSER
        - UPDATE
        - DELETE
        
    - TCL : 트랜잭션 관련 명령어 -> 취소불가

        - COMMIT : 현재 작업까지 작업 내용을 원본에 반영
        - ROLLBACK : 작업 내용을 취소
        - SAVEPOINT : 취소할 지점을 만드는 명령

    - DCL : 제어 명령 -> 일반적으로 취소 불가
            
        - DB 운영자의 언어
        - GRANT : 권한 부여
        - REVOKE : 권한 회수

    - 개발자에게 중요한 순서
        - (중요) DQL -> DML -> TCL -> DDL -> DCL

10. SELECT 문
    - 데이터 조회 명령어로 원본에 아무런 영향을 주지 않는다.
    - 원본에서 데이터를 복제해서 반환하는 것으로 원본을 주는 것이 아니다.

    @ 원래 실제 작업에서는 테이블의 형식을 ER 다이어그램의 형태로 주고 그것을 보고 작업하게 되는 경우가 많다.
      하지만 학습할 때는 가지고 있는 샘플데이터 등의 구성을 가지고 조작하는 습관을 들이는 것이 좋다.

    - SELECT 용어
            
        - Selection : 테이블의 행을 선택할 때 사용하는 것
        - Projection : 테이블의 열을 선택할 때 사용하는 것
        - Join : 공유테이블 양쪽의 열에 대해서 링크를 생성해서 다른 테이블의 데이터를 가져와서 합치는 것.

    - MariaDB 에서 SELECT 문의 구조

        - SELECT        (실행순서_5)    데이터를 열 단위로 조회하기 위한 열이름이나 계산식을 나열
        - FROM          (실행순서_1)    데이터를 조회할 테이블을 나열
        - [WHERE]       (실행순서_2)    데이터를 행 단위로 분할하기 위한 조건
        - [GROUP BY]    (실행순서_3)    데이터를 그룹화시키기 위한 열 이름이나 계산식을 나열
        - [HAVING]      (실행순서_4)    데이터를 행 단위로 분할하기 위한 조건
        - [ORDER BY]    (실행순서_6)    데이터를 정렬하기 위한 열이름이나 계산식 또는 SELECT 절의 번호와 정렬 방법
        - [LIMIT]       (실행순서_7)    데이터의 위치와 개수를 지정해서 가져오기 위한 절로 표준은 아님

        => FROM을 수행하게 되면 원본 데이터베이스에서 테이블 단위로 복제해 와서 작업을 수행

    - SELECT 문의 가장 기본적인 형태
        
        - select * from 테이블이름
            테이블이름에 해당되는 테이블의 모든 컬럼을 반환.
            출력되는 컬럼의 순서는 테이블을 만들 때 작성한 순서대로 반환된다.
            직접 테이블을 생성한 경우가 아니라면 * 은 사용하지 않는 것이 좋다.

        - select 필요한 컬럼 나열 from 테이블 이름
            필요한 컬럼만 반환. 

              

    - SELECT 절에서의 별명 설정

        - SELECT 절에서는 컬럼에 별명을 부여할 수 있다.
        - 하나의 공백을 두고 별명을 설정하면 되는데 이 때 공백 자리에 AS를 추가 해도 된다.
        - 별명에 공백이나 특수문자 또는 대문자가 있으면 " "로 묶어야 한다.
        - SELECT 절의 별명은 ORDER BY 절에서만 사용가능하고 프로그래밍 언어에서도 별명을 통해 데이터를 가지고 온다.
          order by 절에서만 select절의 별명을 사용할 수 있는 이유는 실행 순서가 select가 5순위, order by가 6순위이기 때문이다.

        - 계산식이니나 그룹 함수의 결과를 조회하고자 할 때 별명을 부여하는 것이 좋다.
        
    - 계산식 출력
        - FROM 절을 제외한 모든 곳에서 계산식 사용이 가능
        - 계산식은 가상의 컬럼이고 FROM은 실제 테이블을 가져오는 것이기 때문에 FROM 절에서는 계산식을 사용할 수 없음
        - EX) tCity 테이블에서 name과 popudp 10000을 곱한 결과를 조회하기
              SELECT name.popu * 10000 AS "인구(명)"
              FROM tCity;

    - concat 함수
        - 2개 이상의 문자열을 합쳐주는 함수
        - 2개 이상의 컬럼이나 연산식을 하나로 합쳐서 출력하기 위해서 사용
        - MyBatis 와 같은 Mapper Framework에서 like를 사용하기 위해서는 알아두어야 한다.

        - SELECT ENAME, JOB FROM EMP;에서는 JOB과 ENAME을 따로 가져오는 것이지만,
        - SELECT concat(ENAME, '',JOB) FROM EMP로 불러오면 한번에 가져오고 중간의 " "과 같이 함께 가져오게 된다.
        
    - DISTINCT
        - SELECT 절의 맨 앞에 한 번만 기재해서 컬럼의 중복된 값을 제거하는 역할
        - 컬럼의 이름이 하나면 그 컬럼의 값이 중복된 레코드만 하나 남기고 제거하고 컬럼이 2개 이상이면 모든 값이 일치하는 경우에만 중복된 레코드 하나만을 남기고 제거

        - 테이블에서 region이 중복되면 중복된 값 하나만을 남기고 나머지 중복값은 제외하고 조회
            - select distinct region from tCity;

        - region과 name 모두 중복된 경우에만 중복된 레코드 하나만 남기고 나머지 중복 레코드를 제외
            - select distinct region, name from tCity;

    - ORDER BY 
        - 조회된 데이터를 정렬하기 위한 절
            
        - ORDER BY 컬럼이름 [ASC|DESC] 나열
            - ASC는 오름차순, DESC는 내림차순으로 ASC가 기본값
            - 숫자는 작은 것에서 큰 순서대로
            - 날짜는 빠른 것에서 늦은것으로
            - 문자는 알파벳 순서대로 앞글자부터 비교
            - NULL이 가장 마지막에 오게 된다.

        - 컬럼이름 대신에 SELECT 절의 순서로 설정하는 것이 가능
        - SELECT 절에서 만든 별명 사용 가능
        - 2개 이상의 필드를 나열할 수 있는데 첫번째 필드로 정렬하고 동일한 값이 있는 경우 두번째 필드의 정렬 조건을 확인한다.
        - 계산식을 이용한 정렬이 가능하다.
        - 권장하지 않지만 정렬기준 필드를 출력하지 않아도 된다.

        - 아래와 같이 작성하면 3번째 컬럼 요소를 기준으로 오름차순/내림차순 정렬할 수 있게 된다.
            SELECT * FROM tCity ORDER BY 3;
            SELECT * FROM tCity ORDER BY 3 DESC;

        - tCity 테이블의 데이터를 region 별로 정렬하고 동일한 값이 있으면 name의 내림차순으로 정렬하고 region, name, area, popu 컬럼을 조회하도록 한다.
                
            - SELECT region, name, area, popu FROM tCity ORDER BY region, name DESC;

        - SELECT 구문의 결과가 2개 이상의 행이 될 것 같을 경우에는 ORDER BY를 이용해서 정렬을 해주는 것을 권장한다.

    - WHERE

        - 테이블의 데이터를 행 단위로 분할하기 위한 조건을 설정하는 절
        - SELECT, UPDATE, DELETE 구문과 함께 사용
        - 비교연산자
            - =
            - >
            - <
            - >=, NOT 컬럼이름 <
            - <=, NOT 컬럼이름 >
            - <>, ^=, NOT 컬럼이름 = 
        
            - MariaDB인 경우 대소문자를 구별하지 않는 경우가 있을 수 있으므로 유의해야 한다.

                - tCity 테이블에서 name이 서울인 데이터의 모든 컬럼을 조회
                    SELECT * FROM tCity WHERE name = '서울';

                - tCity 테이블에서 metro가 y인 데이터의 모든 컬럼을 조회
                    SELECT * FROM tCity WHERE metro = 'y' 에서 'Y'로 바꿔도 동일하게 결과를 가져온다.

                - 대소문자 구별하기 조회를 할 때 컬럼이름을 BINARY로 묶어주거나 컬럼을 만들 때 자료형 뒤에 BINARY를 추가해줘야 한다.
                    SELECT * FROM tCity WHERE BINARY(metro) = 'Y';
            
            - 크다 작다, 크거나 같다, 작거나 같다 등의 조건이 있는 경우 테스트를 할 때 경계값과 경계값 양 쪽의 데이터를 반드시 테스트 해야 한다.(경계값 분석 기법)

            - NULL은 일반 비교연산자로 비교가 불가능하기 때문에 IS NULL 혹은 IS NOT NULL로 비교해야 한다.

                - DB에서 NULL을 저장하는 방법은 공간에 NULL을 대입하는 개념이 아니고 NULL을 저장할 수 있는 컬럼에는 데이터를 저장할 수 있는 공간에 하나의 공간을 추가해서 그 공간에 NULL 여부를 표시하기 때문이다.
                - 선언할 때 NOT NULL로 추가된 컬럼은 아예 NULL 판별 공간이 없다. 
        
        - 논리 연산자 AND 와 OR 를 제공한다.
            - AND 는 두 개의 조건이 모두 일치하는 경우만 조회하는데 앞의 조건이 일치하지 않으면 뒤의 조건은 확인하지 않는다.
            - OR 는 두개의 조건 중 하나만 일치해도 조회하는데 앞의 조건이 일치하면 뒤의 조건은 확인하지 않는다.
            - AND 가 OR 보다 우선순위가 높다.

        - LIKE 
            - 부분 일치하는 데이터를 조회한다.
            - 와일드 카드 문자
                - _ : 하나의 문자와 매칭.
                - % : 글자 수 상관 없이 앞의 문자열을 포함하고 있는 것 매칭.
                - [] : 문자를 나열하면 문자중 하나와 일치하는 것을 매칭
                - [^] : 문자를 나열하면 문자에 포함되지 않는  것을 매칭.
            
            - 와일드 카드 문자를 검색하고자 하는 경우 ESCAPE를 이용한다.

            - Ex> EMP 테이블에서 ENAME이 N으로 끝나는 6자의 이름을 가진 데이터존재.
                - SELECT * FROM EMP WHERE ENAME LIKE '_____N
                " 갯수가 나오면 대부분은 _문제
        
        - BETWEEN ~ AND
            - BETWEEN A AND B 형태로 작성하는 A 부터 B 까지의 데이터 조회
            - 숫자, 날짜, 문자열 모두 사용 가능하다.
            
            - 단순 AND로 대체할 수 있다.
                - EX) SELECT popu BETWEEN 50 AND 100; 와 같이 사용한다.
            
            - 문자의 비교 크기는 맨 앞 글자부터 순서대로 하나씩 비교한다.
        
        - Ex) tCity 테이블에서 name이 ㅊ이 포함된 문자로 시작하는 데이터 조회하기
              오답 : SELECT * FROM tCity WHERE name LIKE '%ㅊ';
              정답 : SELECT * FROM tCity WHERE name >= '차' AND name < '카'

        - IN
            - IN(값을 나열) : 나열된 값에 포함되는 경우 조회한다.

            - Ex) tCity 테이블에서 region 이 경상이나 전라 인 데이터 조회
                  SELECT * FROM tCity WHERE region = '경상' AND region = '전라';
                  SELECT * FROM tCity WHERE region IN('경상', '전라');

                -> 둘 다 결과는 똑같지만 후자의 결과가 더 빠르다, 이처럼 같은 결과를 가져오지만 항상 더 빠른것이 무엇인가 고려할 것.

    - LIMIT

        - 행의 개수 제한에 이용한다.
        - LIMIT [건너뛸 행의 개수], 조회할 개수 형태로 사용한다.
        - 최근에는 LIMIT 개수 OFFSET 건너뛸 행의 개수 형태로도 사용한다.
        
        - Ex) tCity 테이블에서 popu가 큰 5번째 데이터부터 2개 조회
              SELECT * FROM tCity ORDER BY popu DESC LIMIT 4, 2;
              SELECT * FROM tCity ORDER BY popu DESC LIMIT 4 OFFSET 2;
              SELECT * FROM tCity ORDER BY popu DESC 4 ROWS FETCH NEXT ROWS ONLY;

    - Scala Function
        => 하나의 데이터를 받아서 하나의 데이터를 반환하는 함수.
        => 컬럼을 데이터로 제공하면 각 컬럼의 데이터 단위로 작업을 수행한 후 결과를 하나의 컬럼으로 만들어 반환한다.
        
        1) 수치함수
            => 숫자 연산과 관련된 함수로 올림, 버림, 반올림 등의 함수가 제공된다.
            => 데이터는 숫자 데이터이어야 한다.
            => FROM 절을 제외한 곳에서 사용이 가능하다.
            => Ex> EMP 테이블에서 EMPNO가 홀수인 데이터를 조회하는 방법
                - MOD(데이터, 나누는 수) 는 나머지를 반환.
                -> SELECT * FROM EMP WHERE MOD(EMPNO, 2) = 1;

        2) 문자열 함수
            => CONCAT               : 문자열을 결합하는 함수
            => UPPER, LOWER         : 대소문자 관련 함수
            => LTRIM, RTRIM, TRIM   : 공백제거 관련함수
            => SUBSTRING            : 문자열 자르는 함수
            => LENGTH               : 길이 관련 함수

            => Ex> EMP 테이블에서 1982 년에 입사한 사원의 ENMAE과 SAL을 조회 

                - 입사일 -> HIREDATE
                -> SELECT ENAME, SAL FROM EMP WHERE HIREDATE >= '18820101' AND HIREDATE <='19821231';
                -> SELECT ENAME, SAL FROM EMP WHERE BETWEEN '18820101' AND '19821231';
                -> SELECT ENAME, SAL FROM EMP WHERE SUBSTRING(HIREDATE, 1, 4) = '1982';

        3) 날짜 관련 함수
            => 현재 날짜 및 시간
            => CURRENT_DATE(), CURDATE() : 현재날짜
            => CURRENT_TIME(), CURTIME : 현재시간
            => CURRENT_TIMESTAMP() : 현재날짜 및 시간

            => ADDDATE(날짜, 차이), SUBDATE(날짜, 차이)
                -날짜를 기준으로 차이를 더하거나 뺀 날짜를 구함

            => ADDTIME(날짜/시간, 시간), SUBTIME(날짜/시간, 시간)
                - 날짜/시간을 기준으로 시간을 더하거나 뺀 결과를 구함

            => 특정날짜 생성
                -> STR_TO_DATE(문자열, 서식) : 서식에 맞춰서 문자열을 날짜 형태로 변환
                    - STR_TO_DATE('1982-05-05 11:00:00', '%Y-%m-%d');
                    - 날짜에서 많이 사용하는 포맷이므로 날짜로 간주한다.
        
        4) 시스템 정보 함수
            => ROW_COUNT()
            => USER()
            => DATABASE
        
        5) 타입변환 함수
            => CAST(데이터 AS 자료형)
            => 자료형 
                - DATETIME: 'YYYY-MM-DD HH:MM:SS'
                - DATE: 'YYYY-MM-DD'
                - TIME: 'HH:MM:SS'
                - CHAR: String
                - SIGNED: Integer(64bit), 부호 사용 가능
                - UNSIGNED: Integer(64bit), 부호 사용 불가
                - BINARY: binary String

        6) NULL 관련 함수
            => IFNULL(데이터1, 데이터2)
                - 데이터1 인자값이 NULL이 아니라면 데이터1을 반환하고 아닐 경우 데이터2를 반환한다.
            
            => NULLIF(데이터1, 데이터2)
                - 데이터1과 데이터2가 같은면 NULL을 반환하고 아닐경우 데이터1을 반환한다.

            => COALESCE(데이터 나열)
                - 나열된 데이터 중 NULL이 아닌 첫번째 데이터를 반환한다.
            
            => 데이터베이스에서 NULL과 연산을 하면 NULL이 된다.

        7) 분기 관련 함수
            => IF

            => CASE 데이터 WHEN 값 THEN 결과
                           ELSE 결과
    
    - GROUPING
        => 그룹화 관련된 기능
        
        1) 그룹함수
            => COUNT        : 개수
            => SUM          : 합
            => AVG          : 평균
            => MAX          : 최대값
            => MIN          : 최소값
            => STDDEV       : 표준편차
            => VARIANCE     : 분산

        2) 특징 
            => NULL은 제외하고 연산한다.
            => COUNT를 제외한 모든 함수는 컬럼 이름이나 연산식을 대입해야 하지만 COUNT는 * 을 사용할 수 있다.
            => COUNT(*)은 모든 컬럼이 NULL인 경우를 제외하고 데이터 개수를 계산한다.

            => SUM과 AVG, STTDEV, VARIANCE 는 문자열에 사용할 수 없다.
            => GROUP BY 이후 부터 사용가능하다.
            => HAVING, SELECT, ORDER BY에서 사용할 수 있다.(실제로 사용할 필요가 거의 없다.)
            
            => SELECT 절에서 사용할 때는 대부분 별명과 함께 사용한다.

        3) COUNT
            => Ex> tStaff의 데이터 개수
                - SELECT COUNT(*) # 모든 컬럼의 값이 NULL이 아닌 경우의 데이터 개수
                    FROM tStaff;
                
        4) 그룹함수에서는 NULL을 제외하고 연산
            => SELECT ROUND(AVG(score), 0) FROM tStaff;             # 18개의 평균
            => SELECT ROUND(SUM(score))/COUNT(*), 0) FROM tStaff    # *을 사용했기 때문에 20개의 데이터 평균 데이터가 NULL인 경우는 0으로 간주한다

        5) GROUPING
            => SELECT 구문에서 데이터를 그룹화 하고자 할 때 사용한다.
            => WHERE절 다음에 수행한다.
            => WHERE절 자음에 수행된다.
            => 이 절이 수행 되어야 그룹함수를 사용하는 것이 가능하다.
                - WHERE 절에서 그룹 함수를 사용할 수 없음

           -> EMP 테이블에서 부터별 DEPTNO 평균 급여 SAL 조회
            -   그룹화한 항목을 제외하고 출력하면 데이터를 알아보기 어려워 힘들다.

            => 그룹화는 여러개 가능
                -> SELECT DETNO, JOB ROUND(SAL, 0 ) FROM EMP GROUP BY DEPTNO, JOB';
            
            => 그룹화 한 후 SELECT 절에서 그룹화 한 항목이나 집계함수가 아닌 데이터의 조회
                ORACLE에서는 에러이고 MYSQL이나 MARIADB는 그룹화 한 항목 중 첫 번째 데이터 조회.

            => 데이터를 필터링 할 때는 할 수 있으면 빨리하는 것이 좋다. (더앞의 절에서 가능하다면.)

            => 그룹함수를 이용한 조건이 아니라면 HAVING에 작성하지말고 WHERE에 작성해야 한다.
        6) HAVING 
            => GROUP BY 다음에 오게 되며 통계 결과 중 출력할 그룹의 조건을 지정

    - window 함수
        => 행과 행사이의 관계를 표현하기 위한 함수
        => 순위나 누적합 등의 연산을 위한 함수
        => 순위 함수로는 동등한 값일 때 어떤 식으로 처리하는지에 따라 여러 함수를 제공하고 N 등분한 그룹도 제공해주는 함수
            - RANK, DENSE_RANK, ROW_NUMBER, NTILE 함수 제공
            
        => 함수 뒤에 OVER를 이용해 순위를 구할 방법을 ORDER BY로 제공해야 한다.
                
            - Ex> EMP 테이블에서 SAL의 오름차순 순위
                -> SELECT RANK() OVER(ORDER BY SAL ASC), ENAME, SAL FROM EMP;

            - Ex> EMP 테이블에서 SAL의 오름차순 정렬해서 4개의 그룹으로 분할
                -> SELECT NTILE() OVER(ORDER BY SAL ASC), ENAME, SAL FROM EMP;
        
    -  JSON 출력 함수
        => 데이터를 조회할 대 JSON_OBJECT로 감싸면 JSON 문자열로 처리해서 반환한다.

        - Ex> SELECT JSON_OBJECT('name', ENAME, 'salary', SAL) FROM EMP;
            -> 홀수번재인  ''의 값이 key, 짝수 번째의 데이터가 값이 된다.
            -> NoSQL에서 굉장히 강력하게 작용

    - SET Operator ---> 점점 더 많이 사욯하는 추세
        1) 개요 
            => 동일한 테이블 구조를 가진 2개의 테이블을 가지고 수행하는 연산
            => 컬럼의 개수가 같아야 하고 컬럼의 자료형이 일치해야 한다.
            => 컬럼의 이름이나 테이블의 이름은 아무런 상관이 없음
            => 종류로는 UNION, UNION ALL, INTERSECT, EXCEPT(MINUS인 데이터 베이스도 있음).
            => 컬럼의 이름은 첫번째 테이블의 컬럼 이름을 사용
            => ORDER BY는 마지막에 한번만 작성한다.
            => 데이터의 자료형이 BLOB, CLOB, BFILE, LONG(데이터 사이즈가 너무 커서 일치 여부 판단에 시간이 오래 걸림.) 이 자료형들은 INDEX를 생성하지 않아서 사용불가.
            => 데이터가 분산되어 있는 경우 연산의 결과를 합칠 때 사용한다.

            => *[데이터가 분산되어 있을 때 처리 방식]*
                
                - 분산된 데이터를 모은 후에 처리하는 것
                    -> 과거에 많이 사용했음 

                - 분산된 상태의 데이터를 분산된 상태에서 처리한 후 결과를 모은 것 
                    -> 속도가 빠른 경우가 많다(Map Reduce), 요즘 대부분 해당 방식 사용.

            => UNION은 중복을 제거하고 UNION ALL은 중복을 제거하지 않는다.

        2) 형식
            SELECT
            FROM
            ...
            SET 연산자

        3) 실습
            => DEPT 테이블의 DEPTNI와 EMP 테이블의 DEPNO의 합집합
                -> SELECT DEPTNO FROM DEPTNO UNION SELECT EMPNO FROM EMP; # 중복제거된 합집합
                -> SELECT DEPTNO FROM DEPTNO UNION ALL SELECT EMPNO FROM EMP; # 중복이 포함된 합집합

            => DEPT 테이블의 DEPTNI와 EMP 테이블의 DEPNO의 교집합
                -> SELECT DEPTNO FROM DEPTNO INTERSECT SELECT EMPNO FROM EMP;

            => DEPT 테이블의 DEPTNI와 EMP 테이블의 DEPNO의 차집합
                -> SELECT DEPTNO FROM DEPTNO EXCEPT SELECT EMPNO FROM EMP;
    
    - SubQuery
        1) 개요 
            => 다른 SQL 구문 안에 포함된 쿼리문
            => SubQuery는 일반적으로 SELECT 구문이다.
            => SubQuery는 반드시 괄호 안에 작성되어야 한다.
            => SubQuery는 포함하는 Query가 실행되기 전에 한 번만 실행된다.


        2) 분류
            => 위치에 따른 분류
                -> FROM 절이 아닌 경우    : SubQuery
                -> FROM 절에 사용된 경우  : Inline View

            => 반환되는 데이터에 따른 분류
                -> 단일 행 SubQuery : 반환되는 결과가 하나의 행
                -> 다중 행 SubQuery : 2개 이상의 행이 반환되는 경우

        3) 사용하는 경우
            => EMP 테이블에서 ENAME이 MILLER인 사원과 동일한 DEPTNO를 가진 ENAME을 조회하고자 하는 경우
                -> 먼저 EMP 테이블에서 ENAME이 MILLER인 사원의 DEPNO를 구하고 그런 다음 그 DEPTNO와 동일한 ENAME을 다시 찾아야 한다.

                    - 따로 처리하면 
                        SELECT DEPTNO FROM EMP WHERE ENAME='MILLER' -> EMP테이블에서 ENAME이 MILLER인 DEPNO을 구할수 있다.
                        SELECT ENAME FROM EMP WHERE DEPTNO = 10; -> 구한 DEPTNO을 이용해서 ENAME을 다시 구함.

                    - SubQuery 이용
                        SELECT ENAME FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME='MILLER')

            => tCity 테이블에서 popu가 최대인 도시의 name을 조회 해본다
                - 잘못된 경우
                    SELECT name, MAX(popu) FROM tCity;
                        -> popu의 최대가 두개이상 존재하게 되면 (동일한 데이터가 많으면) 하나의 결과만 나올 수 있다.
                
                - 잘된 경우
                    SELECT name FROM tCity WHERE popu = (SELECT MAX(popu) FROM tCity);
            
            => EMP 테이블에서 평균 급여(SAL)보다 많은 급여를 받는 사원의 이름(ENAME)과 급여를 조회해본다.
                - SELECT ENAME, SAL FROM EMP WHERE SAL > (SELECT AVG(SAL) FROM EMP);

        5) 다중 열 SubQuery
            => SubQuery 의 결과가 1개의 컬럼이 아니고 여러개의 컬럼인 경우에 사용한다.

            - Ex> tStaff 테이블에서 name이 안중근 인 데이터와 depart와 gender가 일치하는 데이터를 조회해본다.
                -> SELECT * FROM tStaff WHERE (depart, gender) = (SELECT depart, gender FROM tStaff WHERE name = '안중근');

        6) 다중 행 SubQuery
            => SubQuery에서 반환되는 결과가 2개 이상의 행인 경우

            => 이 경우는 =, <>는 사용이 안되고  >, >=, <, <= 도 단독으로 사용안된다.
                = =, <>는 하나의 데이터와 비교 가능한 단일행 연산자 이기 때문이다.

            => 이런 경우에는 IN이나 NOT IN 그리고 ANY와 ALL 같은 다중행 연산자를 사용해야 한다.
                -ANY와 ALL은 MAX와 MIN 함수로 대체 가능하다.
            
            => EMP 테이블에서 DEPNO 별로 그룹화 해서 각 그룹의 SAL이 최대인 데이터와 일치하는 SAL을 가진 데이터의 ENAME과 SAL을 조회해본다.
                
                -> DEPNO 별 SAL의 최대값 조회화기
                    - SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO;

                -> 에러 나는 경우
                    - SELECT ENAME, SAL FROM EMP WHERE SAL = (SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO); 
                    - 서브쿼리의 결과는 3개인데 = 으로 비교 했기 때문에 에러가 발생한다. (하나는 하나로 비교 반드시)

                -> 올바른 경우 (서브 쿼리가 두개 이상 반환하므로)
                    -SELECT ENAME, SAL FROM EMP WHERE SAL IN (SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO); 

    - JOIN
        1) 개요
            => 2개 이상의 테이블을 합쳐서 하나의 테이블을 만드는 것으로 2개의 테이블이 같은 테이블일 수 도 있음
            => 조회하고자 하는 데이터가 2개 이사의 테이블에 나누어져 있거나 하나의 테이블에서 2번 이상 찾아야 하는 경우 사용
        
        2) 종류
            => Cartesian Product
                - Cross JOIN 이라고도 하는데 단순하게 2개 테이블의 모든 조합을 만들어내는 것이다.
            
            => Equi JOIN
                - 양쪽 테이블에 동일한 의미를 갖는 컬럼이 존재할 때 2개의컬럼의 값이 일치하는 경우에만 결합하는 것으로 Inner JOIN 이라고도 한다.

            => NON Equi JOIN
                - Equi Join과 유사하지만 2개의 컬럼의 값이 일치하지 않는 조건으로 결합하는 것이다.

            => Outer JOIN
                - Equi Join과 유사하지만 한쪽 테이블에만 존재하는 데이터도 JOIN에 참여하는 것이다.
            
            => Self Join
                - 동일한 테이블끼리 Join하는 것으로 하나의 테이블에 동일한 의미를 갖는 컬럼이 2개 이상 존재할 때 사용한다.

            => Semi Join
                - SubQuery를 이용해서 JOIN 하는 것이다.

        3) Cross Join(Cartesian Product)
            => 양쪽 테이블의 모든 데이터 조합을 만들어내는 것이다.
            => 컬럼의 수는 양쪽 테이블의 컬럼의 수의 합이 되고 행의 개수는 양쪽 행 수의 곱이 된다.

        4) Equi Join 
            => 양쪽 테이블의 동일한 의미를 갖는 컬럼의 값이 일치하는 경우에만 JOIN을 수행한다.
            => 동일한 의미를 갖는 컬럼이 Foreign Key이면 JOIN의 성능이 좋아진다.
            => 양쪽 테이블에 동일한 이름의 컬림이 존재하는 경우는 컬럼이 중복되기 때문에 앞에 테이블이름.컬럼이름 형태로 사용해야 한다.
            => WHERE절에 Join 조건을 기재하면 된다.
                
                - EMP 테이블의 DEPTNO는 부서 번호이고 DEPT 테이블의 DEPTNO도 부서번호 일 때,
                - SELECT * FROM WHERE EMP.DEPNO = DEPT.DEPTNO
            
            => JOIN 을  한 후 조건을 가지고 데이터를 조회하는 경우 JOIN 조건을 먼저 기재한다.
             
             - ENAME이 MILLER인 사원의 DNAME과 ENAME을 조회, 이 경우 DNAME은 DEPT 테이블에, ENAME은 EMP 테이블에 존재하기 때문에  JOIN으로 해결해야 한다.
                -> SELECT DNAME, ENAME FROM DEPT, EMP WHERE DEPT.DEPTNO = EMP.DEPTNO AND ENAME = 'MILLER'
                -> SELECT DNAME, ENAME WHERE ENAME = 'MILLER' AND DEPT.DEPTNO = EMP.DEPTNO;

            => 조건이 복잡하지만 조회해야 하는 컬럼이 하나의 테이블에 존재한다면 SubQuery로 해결 가능
            => 동일한 문제를 SubQuery로 해결 할 수 있다면 SubQuery를 사용해야한다
                -> RDBMS의 가장 큰 단점 중 하나가 빈번한 JOIN이다. -> 메모리 차지가 심하다.
            
            => JOIN에서 테이블의 순서
                - 선행 테이블에 조건을 설정해서 데이터를 추출한 후 후행 테이블의 데이터를 결합하는 방식.
                - 조건을 확인해서 데이터의 추출 개수가 적은 테이블을 선행 테이블로 사용해야 한다.
                - 한쪽 테이블에만 적용되는 조건이라면 그 조건이 적용되어야 하는 테이블을 먼저 기재하는 것이 좋다.
                - 앞의 문제에 있어서 조건 중에 ENAME을 가지고 조회하는 조건이 있으므로 JOIN을 할 때 ENAME을 포함하고 있는 EMP 테이블을 선행 테이블로 사용하는 것이 좋다.

        5) NON Equi JOIN
            => JOIN 조건이 = 가 아닌 경우
                EMP 테이블의 SAL은 급여이고 SALGRADE 테이블의 GRADE는 급여 등급이고 LOSAL은 등급의 최저 급여이고 HISAL은 등급의 최고 급여이다.
                이때,
                SAL은 LOSAL이나 HISAL과 일치하지 않을 수 있음
                SAL이 LOSAL과 HISAL 사이의 값이 경우의 GRADE를 조회
                    -> 다른 테이블의 데이터와 비교할 때 = 연산자가 아닌 것으로 비교하면 NON Equi Join이라고 한다.
               
                각 사원의 이름 (EMP.ENAME)과 GRADE(SALGRADE)를 조회
                    -> SELECT ENAME, GRADE FROM EMP, SALGRADE WHERE SAL BETWEEN LOSAL AND HISAL

        6) SELF JOIN
            => 동일한 테이블을 가지고 JOIN
            => SNS나 인력배치 와 같은 인사 관리 시스템에서 많이 이용( SNS_친구찾기 의 원리 )
            => 하나의 테이블에 동일한 의미를 갖는 컬럼이 2개 이상 존재할 때 사용한다.
             -> Ex> 테이블 사원 번호에 해당하는 EMPNO가 있고 관리자 사원번호에 해당하는 MGR이 있다, 이 경우 SELF JOIN이 가능하다.
                    - SELECT e1.ename "사원이름", e2.ename "관리자이름" FROM EMP e1, EMP e2 WHERE e1.MGR = e2.EMPNO

        7) ANSI(미국 표준 협회) JOIN
            => CROSS JOIN을 할 때 FROM 절에 CROSS JOIN을 기재한다.
                - SELECT EMP CROSS JOIN DEPT;
            
            => Equi JOIN 대신에 INNER JOIN이라는 표현을 사용하고 WHERE절에 JOIN 조건을 적지 않고 WHERE절에 앞에 on 을 추가하고 on 절에 JOIN 조건을 기재
                - SELECT EMP INNER JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO;
                
                - 양쪽 테이블 컬럼 이름이 동일한 경우에는 ON 절 대신에 USING(컬럼이름)을 사용하는 것도 가능하다.
                - 양쪽 테이블의 동일한 컬럼은 한 번만 조회된다.
                    -> SELECT * EMP INNER JOIN DEPT USING(DEPNO);

                - 양쪽 테이블의 컬럼 이름이 동일하다면 USING 절도 생략하고 INNER JOIN 대신에 NATURAL JOIN 이라고 기재할 수 있다.
                    -> SELECT * FROM EMP NATURAL JOIN DEPT;
            
        8) OUTER JOIN
            => 한 쪽 테이블에만 존재하는 데이터도 JOIN에 참여하는 것
            => MariaDB에서는 LEFT OUTER JOIN 과 RIGHT JOIN 만을 지원한다.
            => FULL OUTER JOIN은 지원하지 않기 때문에 UNION 연산을 이용해 수행한다.
                -> Ex> SELECT * FROM EMP LEFT OUTER JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO
                        UNION
                       SELECT * FROM EMP RIGHT OUTER JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO

            => 다른 테이블에 존재하지 않는 데이터는 그 테이블의 모든 컬럼의 값을 NULL로 설정한다.

            => Ex> EMP 테이블에 DEPTNO가 10, 20, 30 만 존재하고 DEPT 테이블에는 DEPTNO가 10, 20, 30 , 40 이 존재한다.

        9) 다중 조인
            => 3개 이상의 테이블도 JOIN 가능 
            => 2개 테이블을 JOIN을 하고 난 후 다른 테이블과 JOIN 하는 형식

        10) JOIN은 메모리를 많이 사용하기 때문에 최대한 자제해야 한다.
            => JOIN은 메모리를 많이 사용하기 때문에 최대한 자제해야 한다.
                - RDBMS 의 최대 단점이 빈번한 JOIN
                - JOIN 없이 해결할 수 있는 문제는 JOIN 없이 해결해야 한다.
                - 반드시 JOIN이 필요한 경우는 SELECT 절에 기재하는 조회하고자 하는 컬럼이 2개 이상의 테이블에 존재하는 경우 뿐이다.
                - 그 이외의 경우는 대부분 SubQuery로 해결할 수 있다.
                -SubQuery를 사용하면 SQL이 길어질 가능성이 높다.

* DDL PPT 확인 *

11. DDL( Data Definition Language )
     => 데이터 구조를 생성하소 변경하고 삭제하는 명령어

     1) 기본형식
        => Create [Temporary] Table 테이블 이름 (
                컬럼이름 자료향 [컬럼제약 조건],
                ...
                [테이블 제약 조건]
            )조건나열;

    2) 자료형
        => 숫자 : TINYINT(1바이트 - 참/거짓), INT(INTEGER), FLOAT, DOUBLE
        => 문자 : CHAR(고정길이), VARCHAR(가변길이), TEXT(긴 문자열), BLOB(파일의 내용)
            
            -> 파일을 DB에 저장하는 방법
                - 파일의 경로를 저장하는 방법 : 파일을 별도로 저장하고 그 경로를 저장
                - 파일의 내용을 저장하는 방법 : 파일을 별도로 저장하지 않고 DB에 저장(BLBO)
        
        => 날짜 : DATE(날짜), DATETIME(날짜와 시간), TIMESTAMP(날짜와 시간), TIME(시간), YEAR(연도)

            -> TIMESTAMP는 LONG형으로 에폭시 타임을 기준으로 하기 때문에 2037년 까지만 표기되기 때문에 지양
        
        => 기타 : JSON, GEOMETRY(공간정보)

    3) 조건나열에서...
        => ENGINE : MyISAM(INDEX SEQUENTIAL ACCESS MEDIA - 조회에 유리) 이나 InnoDB(삽/삭/갱 에 유리)를 설정할 수 있다.

        => DEFAULT CHARSET : 한글이 깨지는 경우 한글 설정하는 옵션으로 UTF8을 설정해주면 되는데 MariaDB는 기본이 UTF8 이다.
        => auto_increament = 시작숫자 : 일련번호를 사용할 때 시작 숫자 부터 시작한다.
        => Timezone 설정 : Mac에서 사용할 때 시간 대역이 안맞아서 설정해주어야 하는 경우가 있다.
       
       